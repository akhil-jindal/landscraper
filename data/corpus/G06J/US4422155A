Multiplier/adder circuit 
US-4422155-A
American Microsystems, Inc.
1983-12-20
https://patents.google.com/patent/US4422155A/en
BACKGROUND OF THE INVENTION
1. Field of the Invention
This invention relates to structures and methods for simultaneously multiplying and adding a plurality of signals. This specification describes such a multiplier/adder circuit in the context of artificially synthesizing human speech.
2. Description of the Prior Art
Multiplier/adder circuits are known in the prior art. A typical multiplier/adder circuit of the prior is a relatively complicated structure requiring the use of a substantial amount of semiconductor material in its fabrication. One particular use for such circuits is in the synthesis of speech utilizing linear predictive coding techniques. A number of techniques exist for synthesizing speech. One technique for synthesizing speech is the phoneme based system. The phoneme based system is based on the principle that most languages can be described in terms of a set of distinctive sounds, or phonemes. For American English, there are approximately 42 phonemes, as shown in FIG. 1. The 42 phonemes for American English are broken down into four broad classes (vowels, diphthongs, semi-vowels, and consonants), and these four broad phoneme classes are broken down into subclasses as shown in FIG. 1. A simplified block diagram for a phoneme based speech synthesis circuit is shown in FIG. 2. The digital representation of each of the phonemes is stored in phoneme memory 1. Speech memory 7 contains the address locations of the phonemes contained in phoneme memory 1, such that phonemes are selected in sequence from phoneme memory 1, thus providing a phoneme string corresponding to the speech to be synthesized. Address locations stored in speech memory 7 are applied via address bus 10 to phoneme memory 1, thus providing an output phoneme string from phoneme memory 1 to digital-to-analog converter 17 through phoneme bus 9. Digital-to-analog converter 17 then converts the digital representation of the phonemes to an analog form which may be applied to other circuitry or a suitable audio transducer (not shown) by output lead 19.
The major disadvantage of the phoneme based speech synthesis system is that the synthesized speech is robotlike, of a very poor quality, difficult to understand and unpleasant and tiring to listen to. An improvement on the phoneme based system utilizes 600 sub-phonemes, thus resulting in better quality than the pure phoneme based system, although the quality of a sub-phoneme based system is still relatively poor.
Another method of artificially synthesizing speech is to simply pulse code modulate a speech signal, and store the pulse code modulated representation in a memory. Such a scheme is shown in the block diagram of FIG. 3. An audio input signal is applied via audio input 19 to pulse code modulation encoder 20. The digital representation of the audio input signal is input to memory 21 from PCM encoder 20 via bus 23. When the speech stored in memory 21 is desired to be synthesized, appropriate addressing circuitry (not shown) causes the digital representation of the speech stored in memory 21 to be output to PCM decoder 22 via output bus 24. PCM decoder 22 then converts this digital representation back into an analog speech signal available at audio output 25.
One disadvantage with using a pulse code modulation scheme, as shown in FIG. 3, for synthesizing speech is that an enormous memory 21 is required for even a modest amount of speech synthesis. For example, assuming a sampling rate of 5 kilohertz, and utilizing 8-bit digital bytes, the bit rate of the pulse code modulation speech synthesis system of FIG. 3 would be 40 kilobits per second. Thus, for 25 seconds of synthesized speech, a rather modest amount, memory 21 must be capable of storing 1,000,000 bits. This large amount of memory required makes pulse code modulation speech synthesis systems impractical for most uses.
Another method of speech synthesis is called differential pulse code modulation (DPCM) or linear delta modulation. A block diagram of a speech synthesis circuit employing differential pulse code modulation is shown in FIG. 4. This system is identical to the pulse code modulation system of FIG. 3, with the exception that pulse code modulation encoder 20 is replaced with differential pulse code modulation encoder 20a, and pulse code modulation decoder 22 is replaced with differential pulse code modulation decoder 22a. A pulse code modulation encoder will convert an audio input sample to a digital representation of the magnitude of the sample voltage. Similarly, a pulse code modulation decoder will take a digital representation and convert it to an analog voltage level. On the other hand, a differential pulse code modulation encoder will cause the amplitude difference between the present sample and the next previous sample to be converted to a digital representation. This digital representation of the amplitude differential between the sampled amplitude and the next previously sampled amplitude is stored in memory 21. A differential pulse code modulation decoder will convert the differential pulse code modulated bytes stored in memory 21 to an analog signal available at audio output 25 which replicates the audio input signal applied to differential pulse code modulation encoder 20 via audio input 19.
Adaptive quantization methods utilize non-linear quantization steps during the encoding and decoding process. In analog speech signals, non-uniform quantizers may be used to allow greater precision over small amplitude changes than over large amplitude changes. For an adaptive differential pulse code modulation (ADPCM) speech synthesis system resulting in the same quality speech synthesis as a pulse code modulation method utilizing a 40 kilobit per second bit rate, a bit rate of only 24 kilobits per second is required. Thus, the same 25 seconds worth of speech synthesis will require only 600,000 bits utilizing an ADPCM system, compared with the 1,000,000 bits required by the PCM system.
Yet another method of coding and synthesizing speech is known as linear predictive coding (LPC). This method has become the predominant technique for estimating the basic apectral parameters of speech, vocal tract area functions, and for representing speech for low bit rate transmission or storage. LPC is capable of providing extremely accurate estimates of the speech parameters, and is capable of rapid computation of these estimates. LPC is based on the fact that speech samples can be approximated as a linear combination of past speech samples. By minimizing the sum of the square differences over a finite interval, between the actual speech samples and the predicted ones, a unique set of predictor coefficients can be determined. The predictor coefficients serve as the weighting coefficients used in the linear combination. One of the great advantages in using linear predictive coding to artifically synthesize speech is that the bit rate required for reliably synthesizing high quality speech is much lower than with many other methods of speech synthesis. For example, a system utilizing linear predictive coding to synthesize speech having quality equal to or greater than the PCM or ADPCM methods mentioned above requires a bit rate of only 2.4 kilobits per second. Thus, for the same 25 seconds worth of synthesized speech, the LPC method requires only 60,000 bits of storage. This is a ten-fold improvement in the storage requirements of a speech synthesis system utilizing adaptive differential pulse code modulation, and a greater than fifteen-fold improvement over the storage requirements of a speech synthesis system utilizing pulse code modulation. For this reason, linear predictive coding is widely used in speech synthesis systems where a minimization of required memory, and thus cost, is desired.
Such a speech synthesis integrated circuit device utilizing linear predictive coding is described in U.S. Pat. No. 4,209,836 issued June 24, 1980 to Wiggins, et al. A primary disadvantage in prior art speech synthesis circuits utilizing linear predictive coding, including the Wiggins circuit, is the relatively large area required by the integrated circuit. For example, the integrated circuit device of the Wiggins patent measures approximately 210 mils (0.210 inches) by 214 mils (0.214 inches), thus consuming approximately 45,000 square mils. By integrated circuit standards, this is a very large chip, even though it is fabricated utilizing a P-channel MOS process, which is capable of producing rather compact integrated circuits. Specifically, Wiggins' array multiplier 401, which performs digital multiplications, measures approximately 90 mils by 110 mils, for a total area of approximately 10,000 square mils. Further, Wiggins' digital-to-analog converter 426, which converts the digital output of array multiplier 401, measures approximately 40 mils by 60 mils, thus requiring a chip area of approximately 2,500 square mils. Thus, approximately 1/4 of Wiggins'  prior art circuit is consummed by array multiplier 401 and digital-to-analog converter 426. Due to the rather large size of Wiggins' integrated circuit, no on-chip memory is provided by Wiggins to store digital representations of speech to be synthesized. Thus, the Wiggins circuit requires an external memory for this purpose.
Other prior art circuits used, for example, for the artificial synthesis of speech also utilize binary multipliers which require rather large semiconductor chip areas, thus increasing their cost and requiring external components. Such binary multipliers are described, for example, by Bartee in the book entitled, "Digital Computer Fundamentals", published by McGraw-Hill, 1972 edition, and the book by Rabiner and Gold entitled, "Theory and Application of Digital Signal Processing", published by Prentice-Hall, 1975.
SUMMARY OF THE INVENTION
This invention provides a uniquely designed switched capacitor multiplier/adder which is combined with a digital-to-analog converter in a single subcircuit. The multiplier/adder, in a single operation, multiplies an analog voltage by a coefficient, typically binary, and sums this product with a second analog voltage. The use of this unique subcircuit results in a significant reduction in space requirements for the construction of, for example, a speech synthesis circuit utilizing linear predictive coding over prior art circuits. This reduction in size results in a significant reduction in the manufacturing costs for this circuit over prior art circuits, and additionally allows the option of including on the speech synthesis chip a memory for the storage of binary representations of to-be-synthesized speech patterns.
BRIEF DESCRIPTION OF THE DRAWINGS
FIG. 1 is a diagram showing the relationship between the 42 phonemes of American English.
FIG. 2 is a block diagram of a prior art phoneme based speech synthesis circuit.
FIG. 3 is a block diagram of a prior art speech synthesis circuit utilizing pulse code modulation.
FIG. 4 is a block diagram of a prior art speech synthesis circuit utilizing differential pulse code modulation.
FIG. 5 is a block diagram of the speech synthesis circuit of this invention using the multiplier/adder circuit of this invention.
FIG. 6 is a representation of the formats of each of the four types of data frames utilized by this invention.
FIGS. 7a and 7b form a schematic diagram of analog multiplier/adder 129 and analog delay register 300.
FIG. 7c is a mathematical model of the operation of the multiplier/adder of this invention to perform the operations indicated in table 1.
DETAILED DESCRIPTION OF THE INVENTION
While the description given below is specifically tailored to the use of the multiplier/adder circuit of this invention in conjunction with a speech synthesizer circuit, it is to be understood that the use of this invention is not so limited.
System Overview
A block diagram of the speech synthesis system and the multiplier/adder 129 of this invention is shown in FIG. 5. Speech synthesis system 100 comprises front end subsection 101, linear prediction coding (hereinafter "LPC") filter subsection 102 and back-end subsection 103.
Front End Subsection 101
To understand the operation of the multiplier/adder 129 of this invention, the operation of the speech synthesizer system 100, in which multiplier/adder 129 operates in one embodiment, will be described briefly.
In the operation of speech synthesizer system 100, a desired word is selected by addressing word decode memory 111 via word selection port 110. Word decode memory 111 contains the start address of the coded representation (preferably a digital code is used) of the to-be-synthesized word which is contained in speech data ROM 113. The beginning address location from word decode memory 111 is used to preset address counter 112, which in turn addresses speech data ROM 113. Address counter 112 then increments the address location applied to speech data ROM 113 in order that each digital byte representing the stored word may be accessed from speech data ROM 113 in sequence. Word decode memory 111, address counter 112 and speech data ROM 113 are all well-known in the prior art, and hence will not be discussed in detail here.
Speech data ROM 113 contains information relating to the parameters required to control the ten stage LPC filter 102. This data is encoded into a packed format (see the section of this specification labelled "Frame Format", infra). Information from bytes accessed from speech ROM 113 is applied to voiced/unvoiced decoder 118, which in turn activates switch means 140. The frame format, providing a detailed explanation of the information stored in speech ROM 113, is later discussed under the subheading "Frame Format". The operation of switch 140, contained within LPC filter 102, is described in detail later under the subheading "LPC Filter Subsection". Information from speech data ROM 113 is also used by repeat frame decoder 117 (refer to "Frame Format" subheading) to determine if the information from speech ROM 113 used in a given frame, is to be reused in the next frame.
Information from speech data ROM 113 is fed to input buffer 114. In one preferred embodiment, speech data ROM 113 is capable of outputting an 8-bit byte; in other words, speech data ROM 113 has an 8-bit parallel output. Input buffer 114 is a one word by 40 bit buffer shift register. Each frame may contain eight (8), twenty-four (24) or forty (40) bits. Input buffer 114 is used to convert a plurality of 8-bit bytes from speech ROM 113 into a single frame, of 8, 24 or 40 bits in length. The use of a shift register to serve as an input buffer in this manner is well-known in the prior art, and thus will not be discussed at length.
Parameter value ROM 116 contains the coefficients used in the synthesis of speech utilizing the linear predictive coding techniques. These coefficients are derived in a manner well-known in the art as taught, for example, by Rabiner & Schafer in their book entitled, "Digital Processing of Speech Signals" published by Prentice-Hall, Inc., 1978 and particularly that section beginning on page 396 thereof.
Programmable logic array 115 controls the bit allocation among the various coefficients within the frame, thus providing optimum storage within speech ROM 113. (See "Frame Format".) It also contains address instructions allowing the sequential selection of parameters from the parameter value ROM 116.
End of word decoder 119 utilizes information from speech ROM 113 to determine when the last frame of the to-be-synthesized word is received from speech ROM 113. As shown in FIG. 6, the end of word frame contains logical zeroes in each of the eight bits forming byte 1. End of word decoder 119 then signals oscillator and clock circuit 120, and suitable power-down circuitry (via lead 121) to power-down speech synthesizer 100 during periods when speech is not to be synthesized.
Parameter value ROM 116 is used as a look-up table to decode the data stored in speech data ROM 113. The parameters stored in ROM 116 are the non-linearly quantized values of the LPC coefficients, gain and pitch information. The quantized values stored in ROM 116 are selected for storage by a special quantization program run on a sample of speech representation of the individual speaker. See, for an explanation of the manner in which these quantized values are selected the article entitled "Quantization and Bit Collection in Speech Processing", A. A. Gray, Jr. and J. D. Markel, IEEE Transactions on Acoustics, Speech and Signal Processing, Vol. ASSP-24, No. 6, December 1976. The particular quantized values stored in ROM 116 to be used to reproduce a desired speech are controlled by the output signals from speech ROM 113.
Interpolation logic 122 provides a plurality of interpolated values derived from the particular parameter values stored in ROM 116 and selected for use by the output signals from speech ROM 113. The plurality of interpolated values are obtained during the time periods between the reception of sequential frames from parameter value ROM 116. By providing a plurality of interpolated values, the parameter update rate of speech synthesizer 100 may be increased to N+1 times the frame rate, where N is the number of interpolation intervals between two frames. The use of speech information generated by interpolation logic 122 results in a more natural sounding output, with a resultant decrease in the bit rate, and thus a reduced memory size required for the storage of frames.
Pitch register 123 stores the current pitch period to be used by pitch counter 125. This pitch period is updated once during each interpolation period by information received from interpolation logic 122. The pitch period determines the period, and thus the frequency or "pitch" of the voiced signal source provided by pitch pulse generator 126.
Gain and reflection coefficients stack 124 is a memory stack of well-known design, which stores the current gain and reflection coefficient values, K1 through K10. The stack recirculates the data through the LPC filter 102 at the rate of one cycle per sampling period. The data is updated in the stack once every interpolation period.
LPC Filter Subsection
As a feature of this invention analog multiplier/adder 129 multiplies analog information from analog delay 130 with binary information stored in gain and reflection coefficient stack 124. To this product, analog multiplier/adder 129 adds analog information from switch means 140 according to the schedule shown in Table 1.
Pitch counter 125 receives information from pitch register 123, and drives pitch pulse generator 126 at the appropriate frequency, or "pitch".
Pseudo-random noise generator 127 is the signal source for unvoiced speech (fricatives and sibilants), and comprises an N bit linear code generator with a period of 2N sampling periods (N being an integer normally greater than 12). The output of pseudo-random noise generator 127 is used as a constant amplitude, random sign, source to simulate the unvoiced speech source. In one preferred embodiment of this invention, N is equal to 15; thus pseudo-random noise generator 127 has a period of 32,767 sampling periods (409.6 msec when the sampling period is equal to 125 microseconds);
Switch means 140, controlled by voiced/unvoiced decoder 118, causes either the output of pitch pulse generator 126, or alternatively the pseudo-random noise output from pseudo-random noise generator 127, to be applied to the input of analog multiplier 129.
Backend Subsection 103
The output of analog multiplier 129 is fed to filter 131, thus providing amplifier 132 with a synthesized speech signal that is substantially free from the effects of aliasing. The output signal from analog multiplier/adder 129 is sampled at 8 KHz, and consequently its spectrum is rich in aliasing (foldover) distortion components above 4 KHz, as well as Sin X/X attenuation. The signal is filtered by passing it through a 4 KHz low pass filter with Sin X/X compensation sampled at 160 KHz (filter 131). The Sin X/X compensation provided by filter 131 emphasizes the frequency components of the output of analog multiplier/adder 129 which are attenuated by the Sin X/X deemphasis of multiplier/adder 129. The spectrum of the output signal from filter 131 contains no aliasing distortion components below 156 KHz, making the output suitable for feeding directly into a loudspeaker after amplification. In one preferred embodiment, this filter is also realized using switched-capacitor filter technology.
The output from filter 131 is fed to the input of amplifier 132. Amplifier 132, of well-known design provides suitable amplification for driving a speaker or other desired circuitry (not shown).
Frame Format
The frame format for each of the four types of frames is shown in FIG. 6. A voiced frame comprises 40 bits, which are extracted from speech ROM 113 of FIG. 5 in five bytes, each byte comprising 8 bits. As shown in FIG. 6, byte 1 comprises 4 bits (bits 0 through 3) indicative of the gain factor of the frame. Bit 4 contains information indicative that portions of this frame will be repeated for use in the next frame. Bit 5 contains information indicative of whether this frame is a voiced or unvoiced frame. Bit 5 is fed to voiced/unvoiced decoder 118, as previously described. Bits 6 and 7 of byte 1, bits 0-7 of byte 2, and bits 0-7 of byte 3, comprise coefficients K1 -K4. Bits 0-7 of byte 4 and bits 0-3 of byte 5 comprise coefficients K5 -K10. Coefficients K1 -K10 are of variable length; the length of each coefficient K1 -K10 in each frame is determined by information stored within programmable logic array 115. Bits 4- 7 of byte 5 contain the four bits indicative of the pitch of the frame.
The unvoiced frame, as shown in FIG. 6, requires only three bytes of information. Because it is an unvoiced frame, the pitch information is not required, in that pseudo-random noise, rather than a specific pulse, is used as the analog input signal. Similarly, only four reflection coefficients (K1 -K4) are required for good speech quality. The unvoiced coefficients K1 -K4 are also of variable length, as determined by PLA 115.
The repeat type of frame requires only a single byte of information. In the repeat frame, a single bit (bit 0) indicative of multiple repetitions of the frame, the three bit gain information, and the four bit pitch information are provided. However, the voiced/unvoiced information, as well as coefficients K1 through K10 are not provided, because this information is identical with the immediately prior frame. In this manner, 80% of the information required to generate a repeat frame is provided by input buffer shift register 114 from the information stored to generate the previous frame. The repeat frame is used when information in a given frame does not differ (as measured as distortion of the speech waveform) by a significant amount from the previous frame. In this manner, the size of speech ROM 113 may be decreased over that which would be required by speech synthesis systems which do not utilize a repeat frame.
The end of word frame comprises a single, unique byte, comprised of 8 bits each having the value zero. This unique byte is detected by end of word decoder 119 of FIG. 5, and is used to indicate that the word being synthesized is complete. An output signal from end of word decoder 119 is used to prompt another circuit to choose the next word to be synthesized, and/or to power-down the speech synthesis system.
Multiplier/Adder
A schematic diagram of the unique multiplier/adder circuit 129 of this invention is shown in FIGS. 7a and 7b. Utilizing this multiplier/adder, an analog voltage is multiplied by a binary coefficient, and added to a second analog voltage, if desired. This structure results in a circuit which is significantly smaller than prior art type binary multiplier and adder circuits.
In many instances, it is desired to provide an analog output voltage which is equal to the product of a binary coefficient and an analog voltage summed with a second analog voltage. This may be expressed as shown in Equation (1):

 V.sub.out =KV.sub.in1 +V.sub.in2                           (1)
where
Vout =output voltage from multiplier/adder
K=multiplier coefficient
Vin1 =analog voltage to be multiplied
Vin2 =analog voltage to be added
If the analog input voltages vary over time, they may be sampled, and the operation of Equation (1) performed during each sample interval. The operation of a sample and hold circuit having the design of sample and hold circuits such as circuits 12, 13, and 14 of the circuit of FIGS. 7a and 7b is disclosed in a co-pending patent application Ser. No. 06/239,945 filed Mar. 3, 1981, and assigned to the assignee of this invention, and hence will not be discussed in detail here. The specification and disclosure of this co-pending application are explicitly incorporated herein by reference.
To implement the novel multiplier/adder of this invention the input voltage to be multiplied, Vin1, is applied to terminal 90 (FIG. 7a). Capacitors 93 and 95 of sample and hold circuit 12, having equivalent capacitance values, provide a voltage equal to -Vin1 at node 98 during each hold period. A voltage equal to Vin1 will be available at node 198. K is the digital representation of the coefficient to be multiplied and is made available on bus 129a (capable of transmitting nine (9) bits in parallel) to multiplier/adder 129 from gain and reflection coefficients stack 124. If the sign of the product (KVin1) in Equation (1) is positive, switches 99 and 102 will close, thus causing -Vin1 to be applied to bus 200 through closed switch 17, and Vin1 to be applied to bus 201 through closed switch 18. In a similar manner, if the sign of KVin1 is negative, switches 100 and 101 will close, thus causing Vin1 to be applied to bus 200, and -Vin1 to be applied to bus 201.
Capacitor array 211 is comprised of binary weighted capacitors 110 through 113. Capacitor 110 has a capacitance value of C, capacitor 111 has a capacitance value of 2C, capacitor 112 has a capacitance value of 4C, and capacitor 113 has a capacitance value of 8C. In a similar manner, capacitor array 210 is comprised of binary weighted capacitors 106 through 109. Capacitor array 210 also includes capacitor 105, having capacitance value C, whose function is explained later. Capacitor 106 has a capacitance value of C, capacitor 107 has a capacitance value of 2C, capacitor 108 has a capacitance value of 4C, and capacitor 109 has a capacitance value of 8C. Each capacitor in capacitor arrays 210 and 211 has associated with it two switches, for example, switches 131 and 132 associated with capacitor 113 and switches 123 and 124 associated with capacitor 109. The switches are controlled in a well-known manner by appropriate timing signals. All switches utilized in this invention may be of any suitable type as is well-known in the art, and are preferably metal oxide silicon (MOS) transistors or complementary metal oxide silicon (CMOS) transistors.
Switches 131 and 132 permit one side of capacitor 113 to be connected to either ground, or alternatively to bus 201, which in turn is connected to either Vin1, or -Vin1. Switch 132 will close and switch 131 will open, thus connecting capacitor 113 to ground, if k7, the most significant bit of multiplier coefficient K is a "0"; switch 131 will close and switch 132 will open, thus connecting capacitor 113 to bus 201, if k7, the "128s" bit, is a "1".  In a similar fashion, the "64s" bit (k6) of multiplier coefficient K controls the action of switches 129 and 130, and thus whether capacitor 112 will be connected to ground or bus 201. Similarly, the "32s" bit (k5) of coefficient K controls switches 127 and 128 associated with capacitor 111, and the "16s" bit (k4) of coefficient K controls the operation of switches 125 and 126 associated with capacitor 110. In this manner, the four most significant bits of multiplier coefficient K control the operation of capacitor array 211. In a similar manner, the four least significant bits (k0 -k3) of multiplier coefficient K control the operation of capacitor array 210. The "8s" bit (k3) controls switches 123 and 124 associated with capacitor 109; the "4s" bit (k2) controls switches 121 and 122 associated with capacitor 108; the "2s" bit (k1) controls switches 119 and 120 associated with capacitor 107; and the "1s" bit (k.sup. 0) controls switches 117 and 118 associated with capacitor 106.
The additional capacitor 105 (having capacitance value C) in capacitor array 210, with its associated switches 115 and 116 (controlled by the sign bit k8) has a contribution which is equal to the contribution of the least significant bit of the coefficient K. The purpose of capacitor 105 is to aid in conversion of the value of the coefficient K from "2s" complement presentation to sign magnitude as will be explained below. Switch 116 is closed, and switch 115 is open when the sign bit (k8) of K is positive. Similarly, switch 115 is closed, and switch 116 is open, when the sign bit of K is negative.
During the sampling period, switches 142 and 144 will be closed, and capacitors 106, 107, 108 and 109 will be charged. For example, when the least significant bit (k0) of multiplier coefficient K controlling capacitor 106 is a "1", switch 117 of capacitor array 210 will be closed (and switch 118 will be open) during the sampling period of sample and hold subcircuit 13. Ignoring the inherent offset voltage of operational amplifier 140, this will cause capacitor 106 to charge to Vin1. Capacitor 106 will thus store a charge of CVin1. On the other hand, if the least significant bit of multiplier coefficient K associated with capacitor 106 is a "0", switch 118 will remain closed, thus preventing capacitor 106 from charging. In a similar fashion, capacitor 107 will store either no charge, if its multiplier coefficient bit is a "0", or 2CVin1 if its multiplier coefficient bit is a "1"; capacitor 108 will store a charge equal to either "0" or 4CVin1 ; and capacitor 109 will store a charge of either "0" or 8CVin1.
After this sampling period, switches 144 and 142 will open, and switch 143 will close. Switch 17 will open, and switch 19 will close, thus connecting bus 200 to ground. Since the inverting input of operational amplifier 140 is essentially at ground (since the noninverting input is connected to ground), capacitors 105 through 109 will discharge, with their stored charge being applied to capacitor 141, having capacitance value 16C. The output voltage of operational amplifier 140, Vout ' is given in Equation (2). ##EQU1## where k0-3 =The decimal equivalent of a four bit binary number comprised of the four least significant bits of eight bit multiplier coefficient K, representing the 20, 21, 22 and 23 places. Thus, for example, if K=10011101, k0-3  will be equal to 13, the decmal equivalent of (1101)2.
k8 =The sign bit of the K coefficient.
Simultaneous with the actions just described taking place in capacitor array 210 and sample and hold subcircuit 13, similar actions are taking place in capacitor array 211 and sample and hold subcircuit 14. Capacitor array 211 will be charged to an integral multiple of CVin1, as determined by the four most significant bits (k4-7) of multiplier coefficient K. This charge contained in capacitor array 211, together with the charge stored in capacitor 173 having capacitance value 16C (due to the presence of a to-be-added analog voltage Vin2) are then discharged into capacitor 151 of sample and hold subcircuit 14. At the same time, capacitor 147 (having capacitance value C) is charged to Vout '. This results in the output voltage available at terminal 155 Vout, as given in Equation (3). ##EQU2## where k4-7 =The decimal equivalent of a four bit binary number comprised of the four most significant bits of eight bit multiplier coefficient K, representing the 24, 25, 26 and 27 places. Thus, for example, if K=10011101, k4-7 will be equal to 9, the decimal equivalent of (1001)2.
k8 =The sign bit of the K coefficient.
Ignoring for the moment the contribution of k8 in Equation 3, one can see that for the example given above, Equation 3 will yield: ##EQU3## This is precisely the fraction received when the number 10011101 is treated as a binary fraction. Thus the unique two stage analog multiplier/adder of this invention delivers the same result with a maximum capacitance ratio of 1 to 16 as would a single stage with a capacitance ratio of 1 to 256. Thus, circuit size is minimized by utilizing two capacitor arrays, each having total capacitance of 15C (ignoring sign-bit capacitor 105) rather than a single capacitor array having total capacitance of 255C. This is a primary advantage of the two stage multiplier/adder circuit of this invention.
When even higher accuracy is desired, additional stages may be added in the same manner. Capacitor arrays 210 and 211 may comprise a plurality of N capacitors. For the purposes of this explanation, N has been chosen to equal four. The factors limiting the value of N are operational amplifier accuracy and layout size.
Because the K coefficient is stored in gain and reflection coefficients stack 124 in the "2's complement" form (to simplify addition and subtraction in the interpolator), it is necessary to convert K to the signed magnitude form in analog multiplier/adder 129. This is done by inverting each bit of a negative K parameter and then adding one to the least significant bit. This bit inversion is done in gain and reflection coefficient stack 124. The addition to the least significant bit is accomplished by capacitor C105 in the least significant capacitor array 210. Since conversion is required only for negative values of K, C105 is controlled by the sign bit k8. Thus, switch 115 is closed (and switch 116 is open) when k8 is negative.
Analog Storage Register
Analog storage register 300 is shown in FIGS. 7a and 7b. Register 300 is comprised of a plurality of sample and hold circuits. The following discussion of sample and hold circuit 325 applies equally to each sample and hold circuit contained within analog register 300.
An analog voltage to be stored is received from node 155 connected to operational amplifier 14 of multiplier/adder 129. Node 155 is connected via lead 312 to one side of switch 310. The other side of switch 310 is connected to a first plate of capacitor 308 (having a capacitance 2C). When a voltage Vx applied to lead 312 is to be stored in sample and hold circuit 325, switch 310 closes, thus charging capacitor 308 to 2CVx. Switch 310 then opens and switch 309 closes, thus discharging capacitor 308 into capacitor 304 (having a capacitance value C). This causes a voltage equal to 2Vx to be available on output lead 311 of operational amplifier 301. By causing a voltage equal to 2Vx to be stored in sample and hold circuit 325, inaccuracies due to leakage currents, and component mismatches are reduced by a factor of two. The LPC coefficients to be stored in sample and hold circuits 325 through 333 correspond to the linear predictive coding speech parameters B10 through B2. The analog representations of B10  through B2 are always less than one-half of the maximum voltage output of sample and hold circuits 325 through 333; thus this voltage doubling may be performed without the introduction of errors. However, the analog voltage representation of B1, which is to be stored in sample and hold circuit 334, is not always less than one-half of the maximum output voltage capability of sample and hold circuit 334. Thus, for this reason, capacitor 408 of sample and hold circuit 334 (which corresponds to capacitor 308 of sample and hold circuit 325) has a capacitance value of C. Thus, the analog voltage corresponding to B1 is stored in sample and hold circuit 334 without being doubled.
The output voltages of sample and hold circuits 325 through 334 are applied as needed to lead 340 (through switch 313, for example, in sample and hold circuit 325). Sample and hold circuit 360 is used to buffer the voltage available on lead 340. Furthermore, sample and hold circuit 306 is used to divide the output voltage from, for example, sample and hold circuit 325, by two, thus providing a voltage on output lead 352 of operational amplifier 350 which is equal to the analog voltage representative of B10. This is achieved by utilizing capacitor 346 with capacitance C and capacitor 351 having capacitance 2C. By the selective use of switch 342, capacitor 345 (having a capacitance value C) may be added in parallel with capacitor 346 (also having capacitance C) when buffering the analog voltage representing B1, as stored in sample and hold circuit 334. In this manner, sample and hold circuit 360 acts as a unity gain buffer, thus not dividing by two the analog voltage representing B1. This is necessary because the analog voltage representing B1 was not doubled when it was stored in sample and hold circuit 334.
Iterative Operation of Speech Synthesizer Using Multiplier/Adder Circuit 129
First, a binary representation of the selected word is provided via word selection input 110. The data received from word selection input 110 is used to address word decode ROM 111. The output from word decode ROM 111 is the start address of the speech data contained in speech ROM 113 corresponding to the selected word. Address counter 112 is preset to this start address and begins counting. The output of address counter 112 is used as the address input of speech ROM 113. Data from speech ROM 113 is supplied to input buffer 114. The output of speech ROM 113 is also supplied to end of word decoder 119, which determines if the end of the to be synthesized word has been reached. If byte 1 contains all zeroes, indicating the end of the word has been reached, end of word decoder 119 provides an output 121 which either causes the selection of the next word to be input to the speech synthesis system via word selection input 110, or powers down the speech synthesis circuit. The data from speech ROM 113 is also supplied to repeat frame decoder 117, which determines whether data previously stored in input buffer 114 is to be reused. The output data from speech ROM 113 is also supplied to voiced/unvoiced decoder 118, which determines the status of the voiced/unvoiced bit which in turn controls switch means 140. Data from the input buffer 114 is input to programmable logic array (PLA) 115, which separates the data stored in input buffer 114 into a plurality of coefficients, and provides address instructions to parameter value ROM 116 allowing the sequential selection of parameters from a parameter value ROM 116. The parameter value ROM 116 functions as a look-up table and, based on the address instructions received from PLA 115, provides LPC coefficients to interpolation logic 122. Interpolation logic 122 loads gain and reflection coefficient stack 124 with a plurality of interpolated coefficients values. The pitch coefficient is provided by interpolation logic 122 to pitch register 123, which in turn provides pitch counter 125, with data for use in controlling the pitch pulse generator 126. Pitch pulse generator 126 provides a voiced signal having a specified period to switch means 140. Pseudo random noise source 127 provides an unvoiced signal to switch means 140. Switch means 140 provides either a voiced signal from pitch pulse generator 126 (for the generation of voiced data) or pseudo random noise from pseudo random noise source 127 (for the generation of unvoiced data) as the input signal to analog multiplier/adder 129.
The equations representing the iterative process of the speech synthesizer of this invention are given in Table 1. First, reflection coefficient Y11 is calculated by multiplying the gain factor G (as stored in gain and reflection coefficients stack 124) by the input voltage Ui. Ui is either a voiced signal, from pitch pulse generator 126, or pseudo-random noise from pseudo-random noise generator 127 (see FIG. 6). Input voltage Ui is applied to node 90 (FIGS. 10a and 10b) and through switch 500 to node 198. Positive and negative voltages having magnitudes equal to the input voltage Ui is then applied to bus 200 of capacitor array 210 and bus 201 of capacitor array 211, as previously described. Gain factor G from gain and reflector coefficients stack 124 is applied to switches k0 through k9, thus providing an output from analog multiplier 129 at node 155 which is equal to

 Y.sub.11 (i)=GU.sub.i                                      (5)
This analog voltage representing Y11 is stored in sample and hold circuit 600, in the manner described in co-pending U.S. patent application Ser. No. 06/239,945 filed Mar. 3, 1981.
Y10 is then calculated by the following method. 2B10, as stored in sample and hold circuit 325, is applied to lead 340, and is divided by two by sample and hold circuit 360. Thus, B10 is available on output lead 352 of operational amplifier 350. B10 is then connected to node 198 through closed switches 501 and 502, and applied to analog multiplier 129 as previously described. Reflection coefficient K10 is applied to analog multiplier 129 as previously described, thus controlling the operation of each switch contained within capacitor arrays 210 and 211. Y11 as stored in sample and hold circuit 600 and available on output lead 601 is connected to node 170 through closed switch 503. Thus, the output from analog multiplier/adder 77 and available at node 155 is

 Y.sub.10 (i)=Y.sub.11 (i)-K.sub.10 B.sub.10 (i-1)          (6)
This value of Y10 is stored in sample and hold circuit 600, and the previous value Y11 stored in sample and hold circuit 600 is lost. Y9 is then calculated by applying 2B9, as stored in sample and hold circuit 326, to lead 340, thus providing an output of B9 at output lead 352 of operational amplifier 350. This value of B9 is then applied to node 198 through closed switches 501 and 502, and thus to capacitor arrays 210 and 211. Refection coefficient K9 is used to control the operation of capacitor arrays 210 and 211, and the value of Y10 stored in sample and hold circuit 600 is applied through switch 503 to node 170. Thus the output voltage available on node 155 is equal to

 Y.sub.9 (i)=Y.sub.10 (i)-K.sub.9 B.sub.9 (i-1)             (7)
The value of B10 is then calculated by applying Y9, as stored in sample and hold circuit 600, to node 198 through closed switch 504. Y9 is then applied to capacitor arrays 210 and 211, whose operation is controlled at this time by reflection coefficient K9. The previous value of 2B9 is applied from sample and hold circuit 326 to sample and hold circuit 360 (where it is divided by two) and B9 is thus applied through closed switches 501 and 505 to node 170. Thus, the output available at node 155 is equal to

 B.sub.10 (i)=B.sub.9 (i-1)+K.sub.9 Y.sub.9 (i)             (8)
This value of B10 is then doubled and stored in sample and hold circuit 325 for future use.
The value of Y8 is then calculated by applying 2B8, as stored in sample and hold circuit 327, to sample and hold circuit 360, where it is divided by two. B8 is then applied through switches 501 and 502 to node 198. Reflection coefficient K8 is applied to capacitor arrays 210 and 211 to control the operation of the switches contained therein, and the value of Y9, as stored in sample and hold circuit 600, is applied through switch 503 to node 170. Thus, the output voltage available on node 155 is equal to

 Y.sub.8 (i)=Y.sub.9 (i)-K.sub.8 B.sub.8 (i-1)              (9)
;p Similarly, the operation of this circuit continues in order that values for Y1 through Y11, and B1 through B10 may be calculated as needed. The output signal of this circuit is a voltage equal to the value of B1, which is available from sample and hold circuit 334 on lead 602. The iterative mathematical process depicted in Table I is then repeated, and a further output signal obtained. After each interpolation performed by interpolation logic 122, a plurality of iterations are performed, thus providing a plurality of output signals. This plurality of output signals forms a portion of the word which is being synthesized. Appropriate circuitry for controlling the operation of the various switches (such as switches 501, 502, 503, 504, 505, 310, and 313) are well-known in the art, and thus are not shown or described in detail.
After a first plurality of interpolations by interpolation logic 22, and a second plurality of iterations and outputs from analog multiplier/adder 129, address counter 112 increments by one, and a new set of data is provided to interpolation logic 122, as previously described. In one preferred embodiment, interpolation logic 122 provides four sets of interpolated values from each set of data input to interpolation logic 122. Multiplier/adder 129 provides forty (40) iterations of the equations of Table I, and thus forty (40) output signals for each set of interpolated values from interpolation logic 122. Thus, a third plurality of output signals (forming portions of the word being synthesized), from multiplier/adder 129 is obtained due to each increment of address counter 112.
While this specification describes the use of the analog/multiplier of this invention as an element of a speech processing structure utilizing specific word sizes, components, and formats, it is appreciated that to those skilled in the art a wide variety of embodiments are possible utilizing the teachings of this invention.

               TABLE 1______________________________________  Y.sub.11 (i) = GU(i)  Y.sub.10 (i) = Y.sub.11 (i) - K.sub.10 B.sub.10 (i - 1)  Y.sub.9 (i) = Y.sub.10 (i) - K.sub.9 B.sub.9 (i - 1)  B.sub.10 (i) = B.sub.9 (i - 1) + K.sub.9 Y.sub.9 (i)  Y.sub.8 (i) = Y.sub.9 (i) - K.sub.8 B.sub.8 (i - 1)  B.sub.9 (i) = B.sub.8 (i - 1) + K.sub.8 Y.sub.8 (i)     .     .     .  Y.sub.1 (i) = Y.sub.2 (i) - K.sub.1 B.sub.1 (i - 1)  B.sub.2 (i) = B.sub.1 (i - 1) + K.sub.1 Y.sub.1  B.sub.1 (i) = Y.sub.1 (i) = Filter output______________________________________