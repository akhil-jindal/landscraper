Electronic network for collective decision based on large number of connections between signals 
US-4660166-A
Bell Telephone Laboratories, Incorporated, California Institute Of Technology
1987-04-21
https://patents.google.com/patent/US4660166A/en
ORIGIN OF INVENTION
The invention described herein was made in the performance of work by California Institute of Technology, Pasadena, Calif. under a Grant No. DMR-8107494 with the National Science Foundation.
BACKGROUND OF THE INVENTION
This invention relates to a network of nonlinear devices having continuous (graded response) input-output relations for parallel processing of input signals, and obtaining useful collective decisional responses (to which all of the input signals make a contribution to some degree in the range from 0 to 100%), such as in retrieving discrete information from the network functioning as a content addressable (associative) memory, or in finding a discrete solution to a problem. Because of similarities with real biological neurons, the nonlinear devices are sometimes referred to hereinafter as "neurons" or "neuronal circuits," and the parallel processing of input signals for a collective decision as "neuronal computation."
Many practical problems take such an enormous amount of computation that a solution in real time is not possible. An example is selecting from memory information that best satisfies known characteristics or descriptors, which may be referred to as "clues," but which are insufficient to completely define the information thus retrieved. The present device differs from associative memories of the prior art which use a binary word as a search key that represents a particular value of all or some of the bits in the information word. The key is then compared in a discrete or logical calculation with corresponding tag bits of all stored words, similar to retrieving a particular automobile part in inventory where a code affixed to the part is used to retrieve the part itself. Such an associative memory will access only a particular word of information, unless the key is loose, i.e., has too few attributes that define properties of the information desired. There is no simple representation possible of the degree of confidence to be placed in particular elements of the key. One is then faced (in software or hardware) with the task of reviewing a long list of information words that match the loose key. It would be desirable to have an associative memory that directly and rapidly accesses only one particular information word that best matches the clues, to the exclusion of all others. If the user then determines that was not the correct information, he need only revise the clues.
Pattern recognition is another example of such a problem. In order for reasonable scale special purpose digital computers to cope with recognition tasks in real time, the sensory data must be in a particular format for recognition of a limited set of objects that must be presented in a predetermined orientation. An optical character reader, for example, is limited to one or a few sets of fonts, and each character to be recognized must be properly oriented. While some defects in the characters may be tolerated, major defects or change in font cannot. This is because of the nature of the logic used in a digital system for reducing the input data to the desired recognition decision. Each binary logic gate in a digital system will typically obtain input signals from two or three other gates, and a huge member of independent binary decisions are made in the course of a computation. The gates are influenced at any stage only by process data in a small amount of information. Intermediate solution signals must be stored for use in the next phase of the solution, and many successive phases must be used in order to evaluate the information as a whole. In the present invention, each nonlinear device gets inputs from many or all other devices for a collective decision to be made (in a single phase or convergence time) from all of the input signals presented on the basis of the simultaneous interactions of the devices in the network, which may be expanded virtually without limit to accommodate as large a base of input information as may reasonably be expected for the nature of the problem.
In order that the nature and full scope of the invention be better appreciated, an associative memory will first be described and then the kind of computational problems which may be solved will be described. Following that, the classic "traveling salesman problem" (TSP) will be discussed as a specific example of a more complex computation problem. The nature of this TSP is similar to the categorization problems inherent to perception, such as character recognition, but no appropriate simple model is available as a specific example of perception. The kinds of computational problems which lend themselves to solution by the present invention are those in which a rapid `good enough` discrete interpretation of input signals is desired, which can be described as a `good solution` (or a mathematical extremum) subject to conflicting constraints.
There are many problems outside of perception which are difficult because they involve the following aspects of perception.
1. The reduction of a set of analog input signals to a set of digital or quantized output signals which reflect the analysis of the objects and relationships in the scene.
2. A single general Gestalt interpretation at a broad level is required. Because of the intrinsic noise and incompleteness in the sensory data, ambiguities of interpretation may remain at a fine scale. It is relatively unimportant from a perceptual viewpoint to disambiguate the fine details, and interpretations differing in fine details may be regarded as the same or equally valid. ("Best" is not definable with precision.)
3. Invariance, or appropriate minor changes, in the interpretation over appropriate classes of change of input date, e.g., an object in the scene doesn't change by being moved one foot in the visual field, a background such as a lawn does not depend on locations of individual blades of grass, changing the angle of an object's elements such as a person's arms and legs does not change the person's relationship to another object in the scene . . . .
4. As many as possible of the modes of processing and aspects of the data should be simultaneously brought to bear in parallel in searching for a "best" solution. The information is normally sufficiently strong that a time consuming (or hardware consuming) sequential consideration of special particular hypotheses is not necessary.
The placement of integrated circuit chips on a circuit board is typical of such problems. Given a circuit diagram which describes the interconnections between 75 chips, each having 16 pins, locate the chips on a circuit board such that, the total length of wire used is as small as possible, the length of the longest wire is as short as possible, the number of wires in different wiring channels is as uniform as possible, and the maximum wire depth is as small as possible. These criteria conflict, and a "best" arrangement involves trade-offs. The physical reasons for such criteria are such as to make them significant quantitative goals but not necessities. A really good solution tends to have many almost as good. There may also be many very good local optima which are comparably good, and the true object of a designer is to find one of these, not be obsessed with finding the absolute best solution. In any event the mathematical definition of "best" will be somewhat arbitrary weighing of rather different criteria. These characteristics are shared with perception problems.
The TSP is a classic example of such optimization. It is simple to describe, mathematically well characterized, and makes a good vehicle for describing the use of neuronal circuits to solve constrained optimization problems. A set of n cities, A, B, C, . . . have pairwise distance of separation dAB, dAC . . . , dBC . . . . The problem is to find a closed tour which visits each city once and has a minimum or short total path length. A tour defines a sequence 1, 2, 3, . . . m in which the cities are visited. For example, for five cities A, B, C, D, E, a typical tour might be to first visit B, then D, then A, then E, then C, then return to B. The total path length d of this tour would be

 d=d.sub.BD +d.sub.DA +d.sub.AE +d.sub.EC +d.sub.CB
Like the problem of placing integrated chips on a board so as to minimize total interconnected path lengths, the selection of some particular short path segments precludes using some other short segments in making a closed tour.
The actual best TSP solution is computationally very hard to achieve because the problem is np (nonpolynomial) complete. Usually the practical problem does not require an exact solution; a good solution is acceptable. The practical problems of perception (or circuit wiring) are not concerned with exact solutions either, but rather in finding very good solutions. Most of the very good solutions have much in common, so a collective neural network constructed in accordance with the invention can be used to find a good solution. In easy perception problems, i.e., when identification of objects perceived is easy to make, the good solution found may be best. Similarly, in the TSP solution there may be arrangements of cities in which best is so unambiguous that the good solution found will in fact be best. The present invention is able to compute such a problem.
Collective neuronal circuits of the kind to be described can also perform the calculation required for a content addressable memory of the type that, given enough `clues` as input signals, will produce a very good response in the form of information that best matches the clues. As in other useful computations, the network of interconnected neurons involve the change of state of the network with time. The location of a particular stable point in state space is the information of the particular memory. The information in memory is reached not by knowing an address, but rather by supplying in the initial state any subpart of the memory of adequate size, i.e., enough `clues`.
SUMMARY OF THE INVENTION
An NÃN matrix of input and output conductors are provided with N amplifiers of high gain, each having at least a positive output, and, for some kinds of computational problems, a complementary negative output as well. Each amplifier has a sigmoid input-output relation, with a minimum and a maximum possible output which can be thought of as a "0" and a "1." Each input conductor of the matrix is connected to the input of a separate one of the amplifiers, and each amplifier has each of its output terminals (positive and negative) connected to a separate one of the output conductors. Where there are both positive and negative outputs, the N output terminals are to be understood to be N pairs, with each pair producing complementary output signals. Thus, each amplifier i has its input terminal connected to a separate one of the N input conductors and its input conductor connected to separate ones of the N output conductors connected to amplifiers j, where each such i, j connection is implemented with a resistor Rij. Each amplifier has in addition an input capacitance Ci and an input resistance Ri. The value of each resistor Rij is selected for the nature of the decisional operation desired. The circuit is intended to satisfy the following circuit equation of motion: ##EQU3## where ##EQU4## ui is the input voltage to amplifier i, and Vj is the output from another amplifier. Each amplifier also receives an input current signal Ii from a high impedance source. That equation of motion will cause the network to drive to one of a set of predetermined stable states which presents an output pattern of binary 1's and 0's.
The conductances Tij may take any value, including positive, negative, and zero and usually Rij =Rji. The magnitude of Tij is |Tij |=1/Rij. A negative conductance implies that the resistor Rij is connected from the negative output terminal of amplifier i to the positive input terminal of amplifier j.
When used for accessing information in an associative memory, the input voltages of amplifiers i are set in correspondence with the individual bits of the input word for each clue (descriptor) known for the information desired. Alternatively, a constant current input Ii can be applied to each input in proportion to the confidence that the "neuron" i should be "1" in the final answer and the values ui all started at the same value, typically zero. Once started, the inputs may be removed, and the matrix of interconnected amplifiers will drive to a stable state, producing at the output a unique word that represents the information itself which could include the address of a location in another memory which may then yield a block of words that comprise the information defined by the descriptors used to store and retrieve the unique word from the associative memory. As few as five or six out of twenty descriptors in the input word will normally provide the correct output word from among twenty descriptors used in storing that output word.
When used for an associative memory, all resistors can be chosen to have a value for a conductance of either some constant value or zero, depending on the information stored in binary form, and at least some of the input conductors are set to a predetermined binary one level at each bit position that is known to correspond to a bit 1 stored in memory by the Rij and Rji connecting resistors for the information stored.
When used for problem solutions, all inputs may be set approximately equal, such as to zero, or held in a pattern representing input information and the output pattern of bit's 1 and 0 define the solution. In either application, problem solving or information retrieval, the output in binary form is the best solution to the given problem.
BRIEF DESCRIPTION OF THE DRAWINGS
FIG. 1 illustrates the sigmoid monotonic input-output characteristic for the "neurons" implemented with amplifiers for the present invention. The extreme values of output voltage indicated as 0 and 1 can have any practical value.
FIG. 2 illustrates schematically a network of neurons for implementation of the present invention. Solid black circles at intersections between conductors represent locations at which resistors Rji and Rij can be connected between input conductors and output conductors of neurons in the network.
FIG. 3 illustrates an array of M networks arranged as described with reference to FIG. 2. Only positive output terminals are used for memory purposes, and each Rji =Rij can have a standard unit value or zero (open circuit). The array of networks is connected to an input bus and an output bus for operation as an associative memory.
FIG. 4a illustrates schematically a network of neurons for computational use in a TSP solution for five cities.
FIG. 4b illustrates a network of neurons, each neuron having a characteristic like that of FIG. 1 with both a positive and a complementary negative output available. Typically one but not both output terminals will be connected to output conductors.
FIG. 4c illustrates in more detail the circuit implementation of each neuron in the network of FIG. 4 wherein coupling resistors Rij and Rji, Rki and Rik are placed to implement positive values of Tij, Tji, Tki and Tik in this example, while Rkj and Rjk are placed to implement negative Tkj and Tjk.
FIGS. 5a, b, c and d illustrate the convergence of the neuron network of FIG. 4a to a good TSP solution, wherein the linear dimension of the square in FIG. 4a shows the value of VAi for a time near the starting time, FIGS. 4b and c for successive times, and FIG. 4d for the final state (solution).
FIGS. 6a, b, and c show that the paths found by the system of FIGS. 4a, b and c on 10 random cities, as illustrated in FIGS. 5a, b, c and d, are very short and FIG. 6b is the shortest path. A random path is shown for reference in FIG. 6c.
FIG. 7 is a histogram of the number of different paths between length L and L+0.1 for L=3.5, 3.6, 3.7 . . . on the TSP for 10 cities. The x's give the histogram for the number of times a path between L and L+0.1 was found by a random analog algorithm in 20 tries. The region for L<3.5 has been magnified by a factor of 100 for clarity.
FIG. 8 illustrates in graph B a signal observed in neurobiology which require analysis in real time into types of pulses (stereotypes shown in graph A) and their time of occurrence relative to each other using the present invention in a manner analogous to a TSP best fit problem.
DESCRIPTION OF PREFERRED EMBODIMENTS
An example of an implementation of the present invention will now be described using a network of N nonlinear "neurons" j with their "synaptic" interconnections for an associative memory, after which the use of such a network for a problem solution will be described. For precise description, it should be understood that the "neurons" are amplifiers with sigmoid monatonic input-output relations as shown in FIG. 1. The minimum and maximum outputs are taken as 0 and 1. The function V=g(u) describes the output V due to the input u.
FIG. 2 illustrates a simple 3Ã3 neuron network of noninverting and inverting amplifiers A1, A2, A3 and A1, A2, A3. Each pair, Ai, Ai, constitutes a neuron, and each solid black circle represents a resistor Rij connecting the output of an amplifier Aj to the input of an amplifier Ai, which has either a finite value or a very large (open circuit) value. The conductance Tij =1/Rij may be either positive or negative, depending upon the problem. If positive, the coupling resistor from the output terminal of amplifier Aj to the input terminal of amplifier Ai is a finite value selected for the desired function of the network, and the coupling resistor from the output terminal of amplifier Aj to the input terminal of amplifier Ai is either very large, or omitted (open circuit). For convenience, the amplifiers Ai and Aj will sometimes be referred to hereinafter as simply i and j. This network may, of course, be expanded to an NÃN network with N of any value, such as 20, 32, or 1024. The time constants of the amplifiers are negligible.
Associative Memory
Associative memory and other useful computations in this system involve the change of state of the system with time. The motion of the state of a system of N neurons in state space describes the computation that the set of neurons is performing.
The model behaves as an associative (content addressable) memory when the state space flow generated by the algorithm is characterized by a set of assignable stable fixed points. The stable points are the memories. If the state space flow is a simple flow in which nearby points in state space tend to remain close during the flow (i.e., a nonmixing flow), then initial states which are close (in Hamming distance) to a particular stable state and far from all others will terminate in that nearby stable state.
If the location of a particular stable point in state space is thought of as the information of a particular memory of the system, states near to that particular stable point contain partial information about that memory. From an initial state of partial information about a memory, a final stable state with all the information of the memory is found. The memory is reached not by knowing an address, but rather by supplying in the initial state as `clues` some subpart of the memory. Any subpart of adequate size will do--the memory is truly addressable by content rather than location. A given matrix may contain many memories simultaneously which are reconstructed individually from partial information in an initial state.
Convergent flow to stable states is the essential feature of this operation. There is a simple mathematical condition which guarantees that the state space flow algorithm converges on stable states. Any symmetric conductance matrix T (i.e., Tij =Tji) will produce such a flow. The proof of this property follows from the construction of an appropriate energy function which is always decreased by any state change produced by the algorithm.
A preferred model is based on continuous variables. Let the output variable Vi for neuron i have the range Vi 0 â¦Vi â¦Vi 1, and be a continuous and monotone increasing function of the instantaneous input ui to neuron i. The typical input-output relation Vi =gi (ui) shown in FIG. 1 is sigmoid with asymptotes Vi 0 and Vi 1. It is convenient also to define the inverse output-input relation gi -1 (V).
In the neuron network, ui will lag behind the instantaneous outputs Vj of the other neurons because of the input capacitance Ci of the amplifiers and the finite impedance between the output Vj and the amplifier i. Thus, there is an RC charging equation which determines the rate of change of ui. ##EQU5## Tij Vj represents the electrical current input to amplifier i due to the present potential of amplifier j, and Tij is thus the connection efficacy. Tij of both signs should occur. Ii is any other (fixed) input current to neuron i.
The set of equations represents the resistively connected network of electrical amplifiers shown in FIG. 2. The magnitude of Tij is (1/Rij), where Rij is the resistor connecting the output of j to the input conductor i, while the sign of Tij is determined by the choice of the positive or negative output of amplifier j at the connection intersection, as noted above. Ri is now ##EQU6## where pi is the input resistance of amplifier i. Ci is the total input capacitance of the amplifier i and its associated input lead. The output impedance of the amplifiers is assumed to be negligible. These simplifications result in Eq. (1) being appropriate for the network of FIG. 2.
Consider the quantity ##EQU7## Its time derivative for a symmetric T is ##EQU8## The parenthesis is the right-hand side of Eq. (1), so ##EQU9## Since gi -1 (Vi) is a monotone increasing function and Ci is positive, each term in this sum is non-negative. Therefore

 dE/dtâ¦0, dE/dt=0âdV.sub.i /dt=0 for all i.   (6)
Together with the boundedness of E, Eq. (6) shows that the time evolution of the system is a motion in state space which seeks out minima in E and comes to a stop at such points. E is a Liapunov function for the system.
This deterministic model has a simple flow with limit points (i.e., final time-independent steady state). It can therefore be used in an associative memory or other computational tasks which can be framed as searching for minima or "best" solutions. Computational time-dependent behaviors can be produced by adding antisymmetric contributions to Tij.
For a given symmetric T, the stable states of the continuous system have a simple description when the gain of the "neurons" (the slope of a g(u) at midrange) is high. A slightly simplified instance of the general equations can be used to put a minimum of mathematics in the way of seeing the correspondence. The same basic idea carries over, with more arithmetic, to the general case.
Consider the case in which Vi 0 <0<Vi 1 for all i. Then the zero of voltage for each Vi can be chosen such that gi (0)=0 for all i. Because the values of asymptotes are totally unimportant in all that follows, we will simplify notation by taking them as Â±1 to all i. The second simplification is to treat the case in which Ii =0 for all i. Finally, Tii =0 will be assumed for the following analysis.
This continuous system has for symmetric T the underlying energy function ##EQU10##
The domain in which the final state can lie is described by an N dimensional hypercube -1â¦Vi â¦+1. The maxima and minima of the first term of Eq. (7) in the domain of the hypercube -1â¦Vi â¦1 for all i lie at corners of the N-dimensional hypercube space. (Only in the pathological case that T is a positive or negative definite matrix is an extremum possible in the interior of the space. This is not the case for information storage matrices of the usual type.)
The second term in Eq. (7) alters the overall picture somewhat. To understand that alteration most easily, the gain g can be scaled, replacing

 V.sub.i =g.sub.i (u.sub.i) by V.sub.i =g.sub.i (Î»u.sub.i)

 u.sub.i =g.sub.i.sup.-1 (V.sub.i) by u.sub.i =1/Î»g.sub.i.sup.-1 (V.sub.i)                                                 (8)
This scaling changes the steepness of the sigmoid gain curve without altering the output asymptotes. gi (x) now represents a standard form in which the scale factor Î»=1 corresponds to the gain curve itself, Î»>>1 to a system with very high gain and a step-like gain curve, and Î» small corresponds to a low gain and flat sigmoid curve. The second term of E is now ##EQU11## The integral is zero for Vi =0 and positive otherwise, getting large as Vi approaches Â±1 because of the slowness with which g(V) approaches its asymptotes. However, in the high-gain limit Î»ââ this second term becomes negligible, and simply constrains Vi to be -1â¦Vi â¦1, and the locations of the maxima and minima of the full energy expression become negligibly different from those of the first term of Eq. (7), (in the absence of inputs and zero thresholds), which have already been described. The only stable points of the very high gain continuous, deterministic system therefore correspond to the stable points in which each Vi is either +1 or -1.
For large but finite Î», the second term in Eq. (7) begins to contribute. The form of gi (Vi) leads to a large positive contribution near all surfaces, edges, and corners of the hypercube while it still contributes negligibly far from the surfaces. This leads to an energy surface which still has its maxima at corners, but the minima become displaced slightly toward the interior of the space. As Î» decreases, each minimum moves further inward. As Î» is further decreased, minima disappear one at a time, when the topology of the energy surface makes a mimimum and a saddle point coalesce. Ultimately, for very small Î», the second term in Eq. (7) dominates, and the only mimimum is at Vi = 0. When the gain is large enough that there are many mimima, each is associated with a well-defined minimum of the infinite gain case--as the gain is increased, each minimum will move until it reaches a particular cube corner when Î»ââ.
There are many general theorems about stability in networks of differential equations representing, for example, chemistry, circuits, and biology. The importance of this simple symmetric system is not merely its stability, but the fact that the correspondence with a discrete system lends it a special relation to elementary computational devices and concepts. The convergence of the neuronal state to its stable states is based on the existence of an energy function which directs the flow in state space.
This analysis indicates that a real circuit of operational amplifiers, capacitors, and resistors is able to operate as an associative memory, reconstructing the stable states which have been designed into T. As long as T is symmetric and the amplifiers are fast compared with the characteristic RC time of the input network, the system will converge to stable states and cannot oscillate or display chaotic behavior. While the symmetry of the network is essential to the mathematics, a pragmatic view indicates that an approximate symmetry will suffice. Equivalence of the gain curves and input capacitance of the amplifiers is not needed. For high gain systems, the stable states of the real circuit will be exactly those predicted by the T matrix alone. (The alternative case of slow amplifiers and negligible circuits RC times has similar properties.) Electromagnetic signals have finite propagation velocities. A circuit which is to operate in the mode described must have propagation delays which are considerably shorter than the limiting RC delay or amplifier time constant.
The neuron network just described with reference to FIG. 2, but with N equal to at least about 20 may be used as an associative memory where the information is stored in the form of unit values for the resistance Rij, and the input signals are binary digits representing `clues` as to the information sought, with a binary level of one entered for each known `clue,` and optionally some analog value depending upon the degree of certainty of the clue. A zero is entered for each for unknown factors about the information to be retrieved.
FIG. 3 illustrates an array of M memory planes MP1, MP2 and MP3 . . . MPM, each organized as described with reference to FIG. 2 except that each resistor Rij =Rji is set equal to one unit, or zero, according to the information to be stored in each plane that includes an NÃN network and functions as an associative memory independent of all other planes. The additional memory planes are included to increase the total memory capacity by a factor of M. All of the memory planes are addressed in parallel with an N-bit clue word on an input bus, but only one memory plane will produce at its output terminals an N-bit binary word representing the information being retrieved from memory. All other memory planes will have a binary word consisting of all zeros at its output terminals, unless the same information is stored in a second plane, in which case both will simply output the same information (binary word) simultaneously.
An output (information) bus connects all of the planes to a microprocessor which may then display or make other use of the information. The binary word containing the clues (bit 1's) is composed at the microprocessor, either by an operator at a keyboard, an operating program stored in the microprocessor, or a combination, i.e., an operator interactive program. For example, the program could present on a display screen a menu of information categories. Upon selecting one, the computer program could then present a glossary of key words that may describe the information stored. For each key word that actually applies to the information sought, a bit 1 is entered in sequence, otherwise a bit zero is entered. The result is an N-bit binary word composed of descriptors consisting of bit 1's in specified positions. The information retrieved also consists of an N-bit binary word which is then interpreted by the microprocessor.
For example, the menu may consist of a list of fields or categories of law, such as torts. Having selected that field of law, the program then lists descriptors that may apply in sequence. For each that does apply, a bit 1 is set in the proper sequence and a bit 0 for each one that does not apply. If all the descriptors are known that were used to store the particular information sought, a binary output word would point to a case citation or citations stored in conventional memory, with maximum (100%) certainty. However, a feature of the present invention is that even with less than all the descriptors known, or with some of the descriptors in error, such as six out of twenty-five, the correct binary output word will be retrieved.
The manner of storing the information will now be described, assuming an arbitrary binary word of 25 bits having bit 1's dispersed in what would appear to be a random distribution, but would in fact have a positional relationship to descriptors. If the first and fourth bit positions have a bit 1, and the intervening positions have a bit 0, the Rij and Rji resistors for those bit positions are R14 and R41, which means that the output of the neuron amplifier 4 and the input of the neuron amplifier 1 are connected by a resistor of unit value, and vice versa. If the fifth bit position also has a bit 1, then amplifiers 1 and 5 are similarly interconnected with resistors R15 and R51 of unit value. Note that in this application of the neuronal network it is necessary to use only the positive output terminals. In addition R45 and R54 are included to interconnect amplifiers 4 and 5. The procedure is repeated for every pair of amplifiers i and j corresponding to the ith and jth position having a bit 1 of the 25 bit information word to be stored. All other connections in the network are left open (or connected with very large resistors of virtually infinite resistance).
More than one pattern of binary digits may be stored in a memory plane for retrieval with at least some of the bit 1's entered at the input terminals as clues common to more than one stored pattern. In determining the value of Rij, an additional resistor is not connected between the output of amplifier i and the input of amplifier j (and vice versa to satisfy the condition Rij =Rji) if there is one already there for those situations where more than one pattern of binary digits stored share the same clue. That resistor is simply shared to store more than one pattern of binary digits. For a matrix of 1000Ã1000, there are 1000 neuron amplifiers, and assuming random distribution of 30 bit 1's for the information stored, there will be an average of 1000 connecting resistors for each block of information stored. Consequently, there may be about 700 words (or blocks) of information in a single plane.
When the neuron network has reached a stable state, the output signals will represent the memory which best matches the input. Since there can be 0.25N2 bits stored using N amplifiers, it can be appreciated that a large truly content addressable memory can be provided with a reasonable number N of neurons. The memory would, of course, be of the fixed read-only type if the Rij are fixed, but some flexibility in changing each network resistor Rij may be designed into the matrix thus allowing a capability for changing the content of the memory, just as it may be desirable to change the network for any computational function such as a TSP solution which will now be described.
Problem Solution
The circuit schematically illustrated in FIG. 4a, is comprised of a matrix of n groups of input conductors I1 through I5, paired output conductors O- 1, O+ 1 through O- 25, O+ 25, and neurons (amplifiers of high gain) 1 through 25 having both a positive and a complementary negative output, as shown more clearly in FIG. 4b. Each input line is connected to a single input terminal of one neuron, and to each pair of output conductors O- i, O+ i (where i is a number from 1 to n2) there is a connection of an input conductor Ij by an Rij (where j is a number from 1 to N), except for the related pair of output conductors, defined to be the pair of output conductors associated with a neuron j having the same subscript j for the input conductor Ij connected to the neuron j. Each connection between an input conductor and an output conductor is implemented as shown in FIG. 4c using a connecting resistor of a value that is the reciprocal of the magnitude of Tij. The intrinsic input impedance of a neuron (amplifier) j is shown in FIG. 4c as a capacitor Cj and a resistor pj to circuit ground at the input of the neuron. A conductance Tij connects the output of amplifier j to the input of amplifier i. This connection can be made with a resistance Rij =1/[Tij ]. A negative Tij implies that a (positive) resistor Rij =1/[Tij ] has been connected from the input of i to the inverted output of neuron. The circuit equations of motion are as set forth in Eq. (1) above. Ri is the equivalent of pi and the Rij according to Eq. (2) above. For simplicity, g, R, and C, are arbitrarily picked independent of i, though this is not necessary, and presumably not optimal. With obvious changes of notation in Eq. (1), the equation of motion, wich applies equally well to the associative memory, becomes ##EQU12## For a good solution, it is necessary to solve only an initial value problem, with particular ui at the starting time. The Ii will be time-independent inputs, and merely have the effect of translating the gain curve along the u-axis. This network of neurons (amplifiers) has been demonstrated to be able to locate good solutions to the TSP.
It has been shown that a neuron network as shown in FIGS. 4a and b converges to a stable state. Symmetric conductances (Tij =Tji) are used, which implies that Rij =Rji. Implementing a problem in general, such as the TSP problem, consists of constructing a network of chosen Tij, choosing an initial set of ui, allowing the neuron network to converge to a stable state, and interpreting the answer from the final stable state. In order that the final output be unambiguous, the gain is chosen high enough that in the final stable state each neuron will have an output V very near 0 or 1. The output signals will then be called `0` or `1`, yielding a discrete word of binary digit output signals at the set of positive output terminals (or the one's complement at the negative output terminals) for the desired answer.
Implementing the TSP Problem
The number of neurons N required to solve the "traveling salesman" problem (TSP) is N=n2, where n is the number of cities A, B, C . . . to be included in the tour, and also the number of pairs of output conductors in an NÃN array of vertical single input conductors and horizontal paired output conductors. The network of neurons to calculate good solutions to the TSP problem is set up in such a way that its final states always have the general structure illustrated below, with one bit 1 in each row, and each column of the array, and all other bits zero for each binary output of a set of n output terminals representing a different city. This allows the following interpretation of the final state. Each group of n neurons represents a particular city, and each bit 1 position in a group represents a location in the tour. Thus the final state

 ______________________________________     TOUR LOCATION     1   2        3      4     5______________________________________CITY    A       0     1      0    0     0   (4)   B       0     0      0    1     0   C       1     0      0    0     0   D       0     0      0    0     1   E       0     0      1    0     0______________________________________
shown above as a solution to the TSP problem represents a tour in which city C is the first city to be visited, A the second, E the third, etc. [The length of the path is dCA +dAE . . . dBC.] Each such nÃn final state array of binary digits describes a particular tour of the n cities.
A tour describes an order in which cities are visited. There are 2n tours of each path-length, for each path has an n-fold degeneracy of initial city on a tour and a 2-fold degeneracy of the tour sequence order. There are n! states of the general form above representing n! possible tours. There are thus n!/2n distinct paths for closed TSP routes, and by its time evolution the network will choose one as the best solution in its final state.
In designing a computational circuit for this problem, two features of the connection matrix Tij are essential in this representation. First, it must be of such a nature as to favor strongly stable states of the form of those shown in the tour location table above. Second, of the n! such solutions, it must favor those representing short paths. An appropriate form for this matrix can be found by considering the very high gain limit, in which all final outputs will be 0 or 1. In this situation, the gain disappears from stability considerations, and the equations of motion lead to stable states which are local minima of the quantity ##EQU13## The space over which this is minimized in the high gain limit is the 2N corners of the N-dimensional hypercube defined by Vi =0 or 1. Because of the interpretation of stable points, the N symbols Vi will be described by double indicies VA,j. The row subscript have the interpretation of a city name, and the column subscript the position of that city in a tour.
Consider an energy function ##EQU14## where A, B, and C are positive. The first triple sum is zero if and only if each city row Î± contains no more than one `1`, (the rests of the entries being zero). The second triple sum is zero if and only if each `position in tour` column contains no more than one `1` (the rest of the entries being zero). The third term is zero if and only if there are n entries of `1` in the entire matrix. Thus this energy function evaluated on the domain of the corners of the hypercube has minima of zero for all state matrices with only one `2` in each row, and in each column. All other states have higher energy. One additional term is necessary in the energy function to contain the information about the length of path corresponding to a given tour. Its form can be chosen as ##EQU15## Subscripts are defined modulo n: i.e., V.sub.Î²,n+j =V.sub.Î²,j. Within the domain of states which characterize a tour, this term is numerically equal to the length of the path for that tour.
The total energy for the model consists of the sum of Equations (15) and (16). If A, B and C are appropriately large, all the really low energy states will have the form of a tour. The total energy of that state will be the length of the tour, and that state with the shortest path will be the lowest energy state.
Such a quadratic energy function defines a connection matrix Tij. In this representation of the TSP, using four terms: ##EQU16## In addition, the energy functions represents a bias or input term

 I.sub.Î±i =+Cn "excitation"                           (15)
Within the domain V.sub.Î±i =0 or 1, this connection matrix and bias are an appropriate energy function on which to search for low pathlength solutions to the TSP.
In the usual TSP problem, distance is reciprocal, i.e., the distance is independent of direction so d.sub.Î±Î² =d.sub.Î²Î±. In a more general problem, this need not be true. d.sub.Î±Î² â d.sub.Î²Î± still allows T to be symmetric. When `distances` depend on direction, the last term in Equation (17) should be written:

 -(d.sub.Î±Î²j,i +1+d.sub.Î²Î±j,i -1)     (16)
This will still make T.sub.Î±i,Î²j =T.sub.Î²j,Î±i but allows `best` to depend on the direction in which a link is used.
Simulating the Neuron Network on a TSP with 10 Cities
The energy function and connection matrix just constructed was made by considering Vi =0 or 1, for the conventional TSP. We will use this same connection matrix with a set of continuous neurons. The domain of actual function of the network is the interior of an N-dimensional hypercube, although the line of argument which constructed the network is unable to give "tour" meaning to general point in the interior.
A set of cities is chosen at random (with uniform probability density) on the interior of a two dimensional square of edge 1, defining a particular set of dAB. The neuron network for this problem generates the equations of motion ##EQU17## The form is that described in the previous section within a scale factor. The parameter "n" has not been fixed as 10, but is used as a variable to adjust the neutral position of the amplifier. The form of the gain curve was chosen to resemble a simple transistor circuit. The set of parameters is overcomplete, for the time it takes to converge is in arbitrary units. Without loss of generality, can be set to 1.
An appropriate general size of the parameters is easily found, and an exploration of parameter values was used to find a good (but not optimized) operating point. Results refer to parameter sets for Equation 20 at or near ##EQU18## With A, B, and D equal to 500, and the greatest possible distance separation in x or y coordinates of any two cities taken as a unit distance d, the resistors Rij =Rji for all connections referring to A, B, and D might all be chosen initially to be 10,000 ohms. Then if a city C and City E, for example, are separated by a distance of 0.37d, the resistors representing this fact are chosen to have the value (10,000 0.37)=27,027 ohms and are added in positions RC1,E2, RC2,E3, RC3,E4, . . . RE1,C1, RE1,C2, RE1,C3 such that the input of the first amplifier of the C group is connected to the output of each amplifier in the E group and vice versa, in accordance with Equation 20.
There are many choices of starting states (values of uai) which might be used. The answer being sought is a "broken symmetry" answer, since there are 2n different (degenerate) tours which describe the same path. For the system to converge to an answer, the symmetry must be broken by a small amount of random noise. Real circuits will always spontaneously do so, but in simulations this noise must be added. For example, the initial uAi can be chosen as

 u.sub.Ai =u.sub.oo +Î´u.sub.Ai                        (18)
uoo is picked so that at t=0 ##EQU19## which is also approximately the value the system will have at t=â (uoo is not a critical parameter--choosing it zero instead of as above makes no qualitative difference). The symmetry-breaking uAi are each randomly chosen uniformly in the interval such as

 -1/3u.sub.o â¦Î´u.sub.Ai â¦1/3u.sub.o     (20)
FIGS. 5a, b, c and d show the convergence of a typical such starting state to a final state. The linear dimensions of the square are proportional to the outputs of the "neurons" in the array. In the initial state (not shown) they are very nearly uniform, and as time passes (FIGS. 5a, 5b, 5c), the outputs converge to a final time independent states (FIG. 5d). Notice that the final outputs produce a permutation array with one neuron "on" and the rest "off" in each row and column, and that this final state thus represents a legitimate tour. The choosing of the parameters is a compromise between always obtaining legitimate tours (D small) and weighting the distances heavily (D large). Too large uo results in final states which are not tours and in which values of V.sub.Î±i in the final state are not near 1 or 0. Too small uo yields a poorer selection of good paths.
A convergence from a given starting state is deterministic, but different starting states may lead to different final states. FIGS. 6a and 6b show typical paths obtained in this fashion. FIG. 6c shows for comparison a path that is clearly not the `best,` or even a very good one, and so would not be selected by the system. FIG. 6a is also the best (shortest) path, found by exhaustive search of all paths by this network simulation.
To see how well a selection is being made of good paths, we compare with the lengths of all possible paths. There are n!/2n=181440 total distinct paths from n=10, and a histogram of their length distribution is shown in FIG. 7. The paths found by the simulated NÃN matrix, for n=10 cities and N neurons=n2) in 20 convergences from random states is also shown as the histogram (dot symbols) below the axis. (Of these starting states, 16 converged to legitimate tours.) About 50% of the trials produce one of the 2 shortest paths, the network does an excellent job of selecting a good path, preferring paths in the best 10-5 of all paths compared to random paths.
A person looking at this simple problem also immediately draws a very good path. Our ability to do so is based on the fact that all the relevant relationships can be drawn in two dimensions, and we can visualize the situation. No such capacity is available to the neural network. The problem the network solves has no necessity of being "flat," i.e., two dimensional. The same numerical set of 45 dAB can be randomly assigned to letter pairs Î±, Î². If this is done, no flat representation of the TSP is possible, and the ability to visually solve the problem disappears. It has been found by simulation that the network can still solve this problem. It finds this a somewhat more difficult problem, typically converging to solutions among the best 60 paths.
There is an unnecessary redundancy of search in the above. Since each path is invariant under cyclic permutation, we can eliminate the 20-fold degeneracy choice between 10Â± tours. A particular city j can arbitrarily be located at position 10 in a tour, reducing the degeneracy from 20 to 2, and additional noise terms can be added to break the remaining degeneracy. The performance of the network was slightly improved in this minor variant.
The collective computations using nonlinear analog circuits have aspects from both conventional digital and analog computers. In conventional analog computation, the differential equation which is solved by the electrical circuit is generally the same equation that the programmer wishes to solve in the real world. The variables in the analog computer are closely related to the real-world variables whose behavior is sought. In the present case, however, the circuit differential equation to be solved is of no intrinsic interest. This differential equation is essentially a program by which an answer to a question can be found. Digital computation conventionally involves finding such a new data representation and algorithm for the problem, by which the fixed hardware will eventually construct the desired answer. The collective mode combines the programming and data representation aspects customary to digital computation, but replaces the usual stereotyped logical behavior of a digital system by a stereotyped form of analog computation.
Why does this system work. The TSP problem describes paths which in the formulation of the energy of Equation (15) and Equation (16) involved the V.sub.Î±j having values 0 or 1. The actual analog computation involves the continuous domain, 0â¦V.sub.Î±j â¦1. The decision-making process or computation consists of the smooth motion from an initial state on the interior of the space (where the notion of a `tour` is not even defined) to an ultimate stable point near enough a corner of the continuous domain to be able to identify with that corner. It is as though the logical operations of a calculation could be given continuous values between `True` and `False,` and evolve toward certainty only near the end of the calculation.
Although there may be no well-defined meaning as a `tour` to a state vector other than one of the form shown in FIG. 5d, a qualitative generalization can be made. Suppose row C has an appreciable value in columns 5 and 6 and nowhere else, and no other row has much greater value in these same columns. Then it might be said that city C was being considered (simultaneously) for both position 5 and position 6, that other possibilities were not as likely, and that later in time this positional ambiguity should be resolved. FIG. 5a is an illustration of an intermediate time state in a TSP calculation on 10 cities using random noise initial conditions. At this state of the calculation, it appears that city A wants to be in position 6 or 7 in the tour. Cities B, C, and D want to be in positions 9, 10 or 1, but it is not at all clear which will be in which position. Similarly, position 5 is going to be captured by either city F or G, but again the order is not clear. A decision is already apparent as to roughly where on the tour various cities will be, and this is of itself adequate information to convey to the other cities and positions a restriction on the possibilities which these others should be considering. These rough assignments are plausible, as can be seen from looking at the 10 city map in FIG. 6a. The convergence works because the intermediate states so interpreted are reasonable. Though not precisely defined in terms of tours, they represent the simultaneous consideration of many similar tours. The convergences interpreted in this way moves from very roughly defined tours to higher refinement until a single tour is left. This procedure will work well in problems for which a good solution has many almost as good that are similar to it.
Without changing the basic organization, heuristics can be added to the network in a simple way by changing the matrix, changing the initial state, and changing steady state inputs. For example, in the TSP problem in two spatial dimensions on random cities, inspection shows that the best pathways essentially always connect a city to one of its four nearest neighbors. A heuristic can be added by replacing the true distance between cities which are further apart than that by augmented distances. This will lessen the possibility that such a link occur in a final path, while maintaining the appropriate distance measure for good paths.
Other Applications
Still other applications of the present invention will occur to those skilled in the art, such as real time signal analysis for neurobiology. FIG. 8 illustrates in graph A typical pulses of particular shapes expected on a signal from an extracellular electrode, and in graph B a typical signal obtained in real time from a subject. An extracellular electrode picks up an electrical signal comprised of random and superimposed pulses from many neurons. Each neuron l produces pulses of a particular shape fl (t-tli), where ti is one of the times at which neuron l produces a pulse. The total signal S(t) seen by the electrode is to be described as ##EQU20## The computational problem is to find the decomposition; i.e., given S(t) and the shapes fl (t), determine the discrete set of times tli at which each neuron l produced a pulse. The system seeks a "best fit" set of times for the different discrete shapes of pulses such that the right-hand side of the Eq. (21) is as close as possible to the observed signal S(t). The decomposition problem can be solved for a finite time interval in a single convergence of a collective network requiring only about 10-6 seconds. Thus such signal decomposition can be calculated in real time using the network herein described.