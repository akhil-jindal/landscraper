Intelligent control with hierarchical stacked neural networks 
US-9053431-B1
Michael Lamport Commons
2015-06-09
https://patents.google.com/patent/US9053431B1/en
CROSS REFERENCE TO RELATED APPLICATIONS
The present application is a Continuation of U.S. patent application Ser. No. 13/281,343, filed Oct. 25, 2011, issued as U.S. Pat. No. 8,775,341 on Jul. 8, 2014, which claims benefit of priority from U.S. Provisional Patent Application No. 61/406,777, filed Oct. 26, 2010, each of which is expressly incorporated herein by reference in its entirety.
FIELD OF THE INVENTION
The present invention relates to the field of cognitive neural networks, and more particularly to hierarchical stacked neural networks configured to emulate human intelligence.
BACKGROUND OF THE INVENTION
A neural network (NN), in the case of artificial neurons called artificial neural network (ANN) or simulated neural network (SNN), is an interconnected group of artificial neurons that uses a mathematical or computational model for information processing based on a connectionist approach to computation. In most cases an ANN is, in formulation and/or operation, an adaptive system that changes its structure based on external or internal information that flows through the network. Modern neural networks are non-linear statistical data modeling tools. They are usually used to model complex relationships between inputs and outputs or to find patterns in data. In more practical terms neural networks are non-linear statistical data modeling or decision making tools. They can be used to model complex relationships between inputs and outputs or to find patterns in data. See, en.wikipedia.org/wiki/Artificial_neural_network
An artificial neural network involves a network of simple processing elements (artificial neurons) which can exhibit complex global behavior, determined by the connections between the processing elements and element parameters. One classical type of artificial neural network is the recurrent Hopfield net. In a neural network model simple nodes, which can be called variously âneuronsâ, âneurodesâ, âProcessing Elementsâ (PE) or âunitsâ, are connected together to form a network of nodesâhence the term âneural networkâ. While a neural network does not have to be adaptive per se, its practical use comes with algorithms designed to alter the strength (weights) of the connections in the network to produce a desired signal flow. However, training of the network does not have to be continuous. The Perceptron is essentially a linear classifier for classifying data xÎµ n specified by parameters wÎµ n, bÎµ and an output function Æ=wâ²x+b. Its parameters are adapted with an ad-hoc rule similar to stochastic steepest gradient descent. Because the inner product is a linear operator in the input space, the Perceptron can only perfectly classify a set of data for which different classes are linearly separable in the input space, while it often fails completely for non-separable data. While the development of the algorithm initially generated some enthusiasm, partly because of its apparent relation to biological mechanisms, the later discovery of this inadequacy caused such models to be abandoned until the introduction of non-linear models into the field.
    The rediscovery of the backpropagation algorithm was probably the main reason behind the re-popularization of neural networks after the publication of âLearning Internal Representations by Error Propagationâ in 1986 (Though backpropagation itself dates from 1974). The original network utilized multiple layers of weight-sum units of the type Æ=g(wâ²x+b), where g was a sigmoid function or logistic function such as used in logistic regression. Training was done by a form of stochastic steepest gradient descent. The employment of the chain rule of differentiation in deriving the appropriate parameter updates results in an algorithm that seems to âbackpropagate errorsâ, hence the nomenclature. Determining the optimal parameters in a model of this type is not trivial, and steepest gradient descent methods cannot be relied upon to give the solution without a good starting point. In recent times, networks with the same architecture as the backpropagation network are referred to as Multi-Layer Perceptrons. This name does not impose any limitations on the type of algorithm used for learning.
There are three major learning paradigms, each corresponding to a particular abstract learning task. These are supervised learning, unsupervised learning and reinforcement learning. Usually any given type of network architecture can be employed in any of those tasks. In supervised learning, we are given a set of example pairs (x,y), xÎµX, yÎµY and the aim is to find a function Æ in the allowed class of functions that matches the examples. In other words, we wish to infer how the mapping implied by the data and the cost function is related to the mismatch between our mapping and the data. In unsupervised learning, we are given some data x, and a cost function which is to be minimized which can be any function of x and the network's output, Æ. The cost function is determined by the task formulation. Most applications fall within the domain of estimation problems such as statistical modeling, compression, filtering, blind source separation and clustering. In reinforcement learning, data x is usually not given, but generated by an agent's interactions with the environment. At each point in time t, the agent performs an action yt and the environment generates an observation xt and an instantaneous cost ct, according to some (usually unknown) dynamics. The aim is to discover a policy for selecting actions that minimizes some measure of a long-term cost, i.e. the expected cumulative cost. The environment's dynamics and the long-term cost for each policy are usually unknown, but can be estimated. ANNs are frequently used in reinforcement learning as part of the overall algorithm. Tasks that fall within the paradigm of reinforcement learning are control problems, games and other sequential decision making tasks. These will be discussed in further detail below.
There are many algorithms for training neural networks; most of them can be viewed as a straightforward application of optimization theory and statistical estimation. They include: Back propagation by gradient descent, Rprop, BFGS, CG etc. Evolutionary computation methods, simulated annealing, expectation maximization, non-parametric methods, particle swarm optimization and other swarm intelligence techniques are among other commonly used methods for training neural networks.
Neural network models in artificial intelligence are usually referred to as artificial neural networks (ANNs); these are essentially simple mathematical models defining a function Æ:XâY. Each type of ANN model corresponds to a class of such functions. The word network in the term âartificial neural networkâ arises because the function Æ(x) is defined as a composition of other functions gi(x), which can further be defined as a composition of other functions. This can be conveniently represented as a network structure, with arrows depicting the dependencies between variables. A widely used type of composition is the nonlinear weighted sum, where
      f â¡  ( x )   =  K (   â i  â¢   w i  â¢   g i  â¡  ( x )     )   ,    
where K (commonly referred to as the activation function) is some predefined function, such as the hyperbolic tangent. It will be convenient for the following to refer to a collection of functions gi as simply a vector g=(g1, g2, . . . , gn)

 FIG. 12 depicts a decomposition of Æ, with dependencies between variables indicated by arrows. These can be interpreted in two ways. The first view is the functional view: the input x is transformed into a 3-dimensional vector h, which is then transformed into a 2-dimensional vector g, which is finally transformed into Æ. This view is most commonly encountered in the context of optimization. The second view is the probabilistic view: the random variable F=Æ(G) depends upon the random variable G=g(H), which depends upon H=h(X), which depends upon the random variable X. This view is most commonly encountered in the context of graphical models. The two views are largely equivalent. In either case, for this particular network architecture, the components of individual layers are independent of each other (e.g., the components of g are independent of each other given their input h). This naturally enables a degree of parallelism in the implementation. Networks such as shown in FIG. 12 are commonly called feedforward, because their graph is a directed acyclic graph.
 FIG. 13 shows a recurrent network. Such networks are commonly depicted in the manner shown in FIG. 13A, where Æ is shown as being dependent upon itself. However, there is an implied temporal dependence which is exemplified in the equivalent FIG. 13B.
The possibility of learning has generated significant interest in neural networks. Given a specific task to solve, and a class of functions F, learning means using a set of observations to find Æ*ÎµF which solves the task in some optimal sense. This entails defining a cost function C: Fâ such that, for the optimal solution Æ*, C(Æ*)â¦C(Æ)âÆÎµF (i.e., no solution has a cost less than the cost of the optimal solution).
    The cost function C is an important concept in learning, as it is a measure of how far away a particular solution is from an optimal solution to the problem to be solved. Learning algorithms search through the solution space to find a function that has the smallest possible cost. For applications where the solution is dependent on some data, the cost must necessarily be a function of the observations, otherwise we would not be modeling anything related to the data. It is frequently defined as a statistic to which only approximations can be made. As a simple example consider the problem of finding the model Æ which minimizes
     C =  E â¡  [   (   f â¡  ( x )   - y  )  2  ]    ,    
for data pairs (x,y) drawn from some distribution . In practical situations we would only have N samples from  and thus, for the above example, we would only minimize

         C ^  =   1 N  â¢   â  i = 1  N  â¢    (   f â¡  (  x i  )   -  y i   )  2  .       
Thus, the cost is minimized over a sample of the data rather than the entire data set. When Nââ some form of online machine learning must be used, where the cost is partially minimized as each new example is seen. While online machine learning is often used when  is fixed, it is most useful in the case where the distribution changes slowly over time. In neural network methods, some form of online machine learning is frequently used for finite datasets.

    While it is possible to define some arbitrary, ad hoc cost function, frequently a particular cost will be used, either because it has desirable properties (such as convexity) or because it arises naturally from a particular formulation of the problem (e.g., in a probabilistic formulation the posterior probability of the model can be used as an inverse cost). Ultimately, the cost function will depend on the task we wish to perform. There are three major learning paradigms, each corresponding to a particular abstract learning task. These are supervised learning, unsupervised learning and reinforcement learning. Usually any given type of network architecture can be employed in any of those tasks.
In supervised learning, we are given a set of example pairs (x,y), xÎµX, yÎµY and the aim is to find a function Æ: XâY in the allowed class of functions that matches the examples. In other words, we wish to infer the mapping implied by the data; the cost function is related to the mismatch between our mapping and the data and it implicitly contains prior knowledge about the problem domain. A commonly used cost is the mean-squared error which tries to minimize the average squared error between the network's output, f(x), and the target value y over all the example pairs. When one tries to minimize this cost using gradient descent for the class of neural networks called Multi-Layer Perceptrons, one obtains the common and well-known backpropagation algorithm for training neural networks. Tasks that fall within the paradigm of supervised learning are pattern recognition (also known as classification) and regression (also known as function approximation). The supervised learning paradigm is also applicable to sequential data (e.g., for speech and gesture recognition). This can be thought of as learning with a âteacher,â in the form of a function that provides continuous feedback on the quality of solutions obtained thus far.
In unsupervised learning we are given some data x and the cost function to be minimized, that can be any function of the data x and the network's output, Æ. The cost function is dependent on the task (what we are trying to model) and our a priori assumptions (the implicit properties of our model, its parameters and the observed variables). As a trivial example, consider the model Æ(x)=a, where a is a constant and the cost C=E[(xâÆ(x))2]. Minimizing this cost will give us a value of a that is equal to the mean of the data. The cost function can be much more complicated. Its form depends on the application: for example, in compression it could be related to the mutual information between x and y, whereas in statistical modeling, it could be related to the posterior probability of the model given the data. (Note that in both of those examples those quantities would be maximized rather than minimized). Tasks that fall within the paradigm of unsupervised learning are in general estimation problems; the applications include clustering, the estimation of statistical distributions, compression and filtering.
In reinforcement learning, data x are usually not given, but generated by an agent's interactions with the environment. At each point in time t, the agent performs an action yt and the environment generates an observation xt and an instantaneous cost ct, according to some (usually unknown) dynamics. The aim is to discover a policy for selecting actions that minimizes some measure of a long-term cost; i.e., the expected cumulative cost. The environment's dynamics and the long-term cost for each policy are usually unknown, but can be estimated. More formally, the environment is modeled as a Markov decision process (MDP) with states s1, . . . snÎµS and actions a1, . . . , amÎµA with the following probability distributions: the instantaneous cost distribution P(ct|st), the observation distribution P(xt|st) and the transition P(st+1|st,at), while a policy is defined as conditional distribution over actions given the observations. Taken together, the two define a Markov chain (MC). The aim is to discover the policy that minimizes the cost; i.e., the MC for which the cost is minimal. ANNs are frequently used in reinforcement learning as part of the overall algorithm. Tasks that fall within the paradigm of reinforcement learning are control problems, games and other sequential decision making tasks.
Reinforcement learning is a sub-area of machine learning concerned with how an agent ought to take actions in an environment so as to maximize some notion of long-term reward. Reinforcement learning algorithms attempt to find a policy that maps states of the world to the actions the agent ought to take in those states. In economics and game theory, reinforcement learning is considered as a boundedly rational interpretation of how equilibrium may arise.
The environment is typically formulated as a finite-state Markov decision process (MDP), and reinforcement learning algorithms for this context are highly related to dynamic programming techniques. State transition probabilities and reward probabilities in the MDP are typically stochastic but stationary over the course of the problem. See, http://webdocs.cs.ualberta.ca/Ësutton/book/ebook/the-book.html, expressly incorporated herein by reference.
Reinforcement learning differs from the supervised learning problem in that correct input/output pairs are never presented, nor sub-optimal actions explicitly corrected. Further, there is a focus on on-line performance, which involves finding a balance between exploration (of uncharted territory) and exploitation (of current knowledge). The exploration vs. exploitation trade-off in reinforcement learning has been mostly studied through the multi-armed bandit problem. Formally, the basic reinforcement learning model, as applied to MDPs, consists of: a set of environment states S; a set of actions A; and a set of scalar ârewardsâ in .
    At each time t, the agent perceives its state stÎµS and the set of possible actions A(st). It chooses an action aÎµA(st) and receives from the environment the new state st+1 and a reward rt. Based on these interactions, the reinforcement learning agent must develop a policy Ï: SÃTâA (where T is the set of possible time indexes) which maximizes the quantity R=r0+r1+ . . . +rn for MDPs which have a terminal state, or the quantity
    R =   â  t = 0  â  â¢   Î³ t  â¢  r t       
for MDPs without terminal states (where 0â¦Î³â¦1 is some âfuture rewardâ discounting factor).

After we have defined an appropriate return function to be maximized, we need to specify the algorithm that will be used to find the policy with the maximum return.
The naive brute force approach entails the following two steps: a) For each possible policy, sample returns while following it. b) Choose the policy with the largest expected return. One problem with this is that the number of policies can be extremely large, or even infinite. Another is that returns might be stochastic, in which case a large number of samples will be required to accurately estimate the return of each policy. These problems can be ameliorated if we assume some structure and perhaps allow samples generated from one policy to influence the estimates made for another. The two main approaches for achieving this are value function estimation and direct policy optimization.
Value function approaches attempt to find a policy that maximize the return by maintaining a set of estimates of expected returns for one policy Ï (usually either the current or the optimal one). In such approaches one attempts to estimate either the expected return starting from state s and following Ï thereafter,

V(s)=E[R|s,Ï], 

or the expected return when taking action a in state s and following Ï; thereafter,

Q(s,a)=E[R|s,Ï,a]. 

If someone gives us Q for the optimal policy, we can always choose optimal actions by simply choosing the action with the highest value at each state. In order to do this using V, we must either have a model of the environment, in the form of probabilities P(sâ²|s,a), which allow us to calculate Q simply through






Q
â¡

(

s
,
a

)


=


â

s
â²


â¢


V
â¡

(

s
â²

)


â¢

P
â¡

(



s
â²

|
s

,
a

)





,




or we can employ so-called Actor-Critic methods, in which the model is split into two parts: the critic, which maintains the state value estimate V, and the actor, which is responsible for choosing the appropriate actions at each state.
Given a fixed policy Ï, estimating E[R|â¢] for Î³=0 is trivial, as one only has to average the immediate rewards. The most obvious way to do this for Î³=0 is to average the total return after each state. However this type of Monte Carlo sampling requires the MDP to terminate. The expectation of R forms a recursive Bellman equation: E[R|st]=rt+Î³E[R|st+1].
By replacing those expectations with our estimates, V, and performing gradient descent with a squared error cost function, we obtain the temporal difference learning algorithm TD(0). In the simplest case, the set of states and actions are both discrete and we maintain tabular estimates for each state. Similar state-action pair methods are Adaptive Heuristic Critic (AHC), SARSA and Q-Learning. All methods feature extensions whereby some approximating architecture is used, though in some cases convergence is not guaranteed. The estimates are usually updated with some form of gradient descent, though there have been recent developments with least squares methods for the linear approximation case.
The above methods not only all converge to the correct estimates for a fixed policy, but can also be used to find the optimal policy. This is usually done by following a policy Ï that is somehow derived from the current value estimates, i.e. by choosing the action with the highest evaluation most of the time, while still occasionally taking random actions in order to explore the space. Proofs for convergence to the optimal policy also exist for the algorithms mentioned above, under certain conditions. However, all those proofs only demonstrate asymptotic convergence and little is known theoretically about the behaviour of RL algorithms in the small-sample case, apart from within very restricted settings.
An alternative method to find the optimal policy is to search directly in policy space. Policy space methods define the policy as a parameterised function Ï(s, Î¸) with parameters Î¸. Commonly, a gradient method is employed to adjust the parameters. However, the application of gradient methods is not trivial, since no gradient information is assumed. Rather, the gradient itself must be estimated from noisy samples of the return. Since this greatly increases the computational cost, it can be advantageous to use a more powerful gradient method than steepest gradient descent. Policy space gradient methods have received a lot of attention in the last 5 years and have now reached a relatively mature stage, but they remain an active field. There are many other approaches, such as simulated annealing, that can be taken to explore the policy space. Other direct optimization techniques, such as evolutionary computation are used in evolutionary robotics.
Training a neural network model essentially means selecting one model from the set of allowed models (or, in a Bayesian framework, determining a distribution over the set of allowed models) that minimizes the cost criterion. There are numerous algorithms available for training neural network models; most of them can be viewed as a straightforward application of optimization theory and statistical estimation. Most of the algorithms used in training artificial neural networks employ some form of gradient descent. This is done by simply taking the derivative of the cost function with respect to the network parameters and then changing those parameters in a gradient-related direction. Evolutionary methods, simulated annealing, expectation-maximization and non-parametric methods are some commonly used methods for training neural networks. Temporal perceptual learning relies on finding temporal relationships in sensory signal streams. In an environment, statistically salient temporal correlations can be found by monitoring the arrival times of sensory signals. This is done by the perceptual network.
The utility of artificial neural network models lies in the fact that they can be used to infer a function from observations. This is particularly useful in applications where the complexity of the data or task makes the design of such a function by hand impractical.
The feedforward neural network was the first and arguably simplest type of artificial neural network devised. In this network, the information moves in only one direction, forward, from the input nodes, through the hidden nodes (if any) and to the output nodes. There are no cycles or loops in the network.
Radial Basis Functions are powerful techniques for interpolation in multidimensional space. A RBF is a function which has built into a distance criterion with respect to a center. Radial basis functions have been applied in the area of neural networks where they may be used as a replacement for the sigmoidal hidden layer transfer characteristic in Multi-Layer Perceptrons. RBF networks have two layers of processing: In the first, input is mapped onto each RBF in the âhiddenâ layer. The RBF chosen is usually a Gaussian. In regression problems the output layer is then a linear combination of hidden layer values representing mean predicted output. The interpretation of this output layer value is the same as a regression model in statistics. In classification problems the output layer is typically a sigmoid function of a linear combination of hidden layer values, representing a posterior probability. Performance in both cases is often improved by shrinkage techniques, known as ridge regression in classical statistics and known to correspond to a prior belief in small parameter values (and therefore smooth output functions) in a Bayesian framework. RBF networks have the advantage of not suffering from local minima in the same way as Multi-Layer Perceptrons. This is because the only parameters that are adjusted in the learning process are the linear mapping from hidden layer to output layer. Linearity ensures that the error surface is quadratic and therefore has a single easily found minimum. In regression problems this can be found in one matrix operation. In classification problems the fixed non-linearity introduced by the sigmoid output function is most efficiently dealt with using iteratively re-weighted least squares. RBF networks have the disadvantage of requiring good coverage of the input space by radial basis functions. RBF centers are determined with reference to the distribution of the input data, but without reference to the prediction task. As a result, representational resources may be wasted on areas of the input space that are irrelevant to the learning task. A common solution is to associate each data point with its own center, although this can make the linear system to be solved in the final layer rather large, and requires shrinkage techniques to avoid overfitting.
Associating each input datum with an RBF leads naturally to kernel methods such as Support Vector Machines and Gaussian Processes (the RBF is the kernel function). All three approaches use a non-linear kernel function to project the input data into a space where the learning problem can be solved using a linear model. Like Gaussian Processes, and unlike SVMs, RBF networks are typically trained in a Maximum Likelihood framework by maximizing the probability (minimizing the error) of the data under the model. SVMs take a different approach to avoiding overfitting by maximizing instead a margin. RBF networks are outperformed in most classification applications by SVMs. In regression applications they can be competitive when the dimensionality of the input space is relatively small.
The self-organizing map (SOM) invented by Teuvo Kohonen performs a form of unsupervised learning. A set of artificial neurons learn to map points in an input space to coordinates in an output space. The input space can have different dimensions and topology from the output space, and the SOM will attempt to preserve these.
Contrary to feedforward networks, recurrent neural networks (RNs) are models with bi-directional data flow. While a feedforward network propagates data linearly from input to output, RNs also propagate data from later processing stages to earlier stages.
A simple recurrent network (SRN) is a variation on the Multi-Layer Perceptron, sometimes called an âElman networkâ due to its invention by Jeff Elman. A three-layer network is used, with the addition of a set of âcontext unitsâ in the input layer. There are connections from the middle (hidden) layer to these context units fixed with a weight of one. At each time step, the input is propagated in a standard feed-forward fashion, and then a learning rule (usually back-propagation) is applied. The fixed back connections result in the context units always maintaining a copy of the previous values of the hidden units (since they propagate over the connections before the learning rule is applied). Thus the network can maintain a sort of state, allowing it to perform such tasks as sequence-prediction that are beyond the power of a standard Multi-Layer Perceptron.
In a fully recurrent network, every neuron receives inputs from every other neuron in the network. These networks are not arranged in layers. Usually only a subset of the neurons receive external inputs in addition to the inputs from all the other neurons, and another disjunct subset of neurons report their output externally as well as sending it to all the neurons. These distinctive inputs and outputs perform the function of the input and output layers of a feed-forward or simple recurrent network, and also join all the other neurons in the recurrent processing.
The Hopfield network is a recurrent neural network in which all connections are symmetric. Invented by John Hopfield in 1982, this network guarantees that its dynamics will converge. If the connections are trained using Hebbian learning then the Hopfield network can perform as robust content-addressable (or associative) memory, resistant to connection alteration.
The echo state network (ESN) is a recurrent neural network with a sparsely connected random hidden layer. The weights of output neurons are the only part of the network that can change and be learned. ESN are good to (re)produce temporal patterns.
The Long short term memory is an artificial neural net structure that unlike traditional RNNs doesn't have the problem of vanishing gradients. It can therefore use long delays and can handle signals that have a mix of low and high frequency components.
A stochastic neural network differs from a typical neural network because it introduces random variations into the network. In a probabilistic view of neural networks, such random variations can be viewed as a form of statistical sampling, such as Monte Carlo sampling.
The Boltzmann machine can be thought of as a noisy Hopfield network. Invented by Geoff Hinton and Terry Sejnowski in 1985, the Boltzmann machine is important because it is one of the first neural networks to demonstrate learning of latent variables (hidden units). Boltzmann machine learning was at first slow to simulate, but the contrastive divergence algorithm of Geoff Hinton (circa 2000) allows models such as Boltzmann machines and products of experts to be trained much faster.
Biological studies have shown that the human brain functions not as a single massive network, but as a collection of small networks. This realization gave birth to the concept of modular neural networks, in which several small networks cooperate or compete to solve problems. A committee of machines (CoM) is a collection of different neural networks that together âvoteâ on a given example. This generally gives a much better result compared to other neural network models. Because neural networks suffer from local minima, starting with the same architecture and training but using different initial random weights often gives vastly different networks. A CoM tends to stabilize the result. The CoM is similar to the general machine learning bagging method, except that the necessary variety of machines in the committee is obtained by training from different random starting weights rather than training on different randomly selected subsets of the training data.
The ASNN is an extension of the committee of machines that goes beyond a simple/weighted average of different models. ASNN represents a combination of an ensemble of feed-forward neural networks and the k-nearest neighbor technique (kNN). It uses the correlation between ensemble responses as a measure of distance amid the analyzed cases for the kNN. This corrects the bias of the neural network ensemble. An associative neural network has a memory that can coincide with the training set. If new data become available, the network instantly improves its predictive ability and provides data approximation (self-learn the data) without a need to retrain the ensemble. Another important feature of ASNN is the possibility to interpret neural network results by analysis of correlations between data cases in the space of models. The method is demonstrated at www.vcclab.org, where you can either use it online or download it.
A physical neural network includes electrically adjustable resistance material to simulate artificial synapses. Examples include the ADALINE neural network developed by Bernard Widrow in the 1960's and the memristor based neural network developed by Greg Snider of HP Labs in 2008.
Holographic associative memory represents a family of analog, correlation-based, associative, stimulus-response memories, where information is mapped onto the phase orientation of complex numbers operating.
Instantaneously trained neural networks (ITNNs) were inspired by the phenomenon of short-term learning that seems to occur instantaneously. In these networks the weights of the hidden and the output layers are mapped directly from the training vector data. Ordinarily, they work on binary data, but versions for continuous data that require small additional processing are also available.
Spiking neural networks (SNNs) are models which explicitly take into account the timing of inputs. The network input and output are usually represented as series of spikes (delta function or more complex shapes). SNNs have an advantage of being able to process information in the time domain (signals that vary over time). They are often implemented as recurrent networks. SNNs are also a form of pulse computer. Spiking neural networks with axonal conduction delays exhibit polychronization, and hence could have a very large memory capacity. Networks of spiking neuronsâand the temporal correlations of neural assemblies in such networksâhave been used to model figure/ground separation and region linking in the visual system (see, for example, Reitboeck et al. in Haken and Stadler: Synergetics of the Brain. Berlin, 1989).
Dynamic neural networks not only deal with nonlinear multivariate behaviour, but also include (learning of) time-dependent behavior such as various transient phenomena and delay effects.
Cascade-Correlation is an architecture and supervised learning algorithm developed by Scott Fahlman and Christian Lebiere. Instead of just adjusting the weights in a network of fixed topology, Cascade-Correlation begins with a minimal network, then automatically trains and adds new hidden units one by one, creating a multi-layer structure. Once a new hidden unit has been added to the network, its input-side weights are frozen. This unit then becomes a permanent feature-detector in the network, available for producing outputs or for creating other, more complex feature detectors. The Cascade-Correlation architecture has several advantages over existing algorithms: it learns very quickly, the network determines its own size and topology, it retains the structures it has built even if the training set changes, and it requires no back-propagation of error signals through the connections of the network. See: Cascade correlation algorithm.
A neuro-fuzzy network is a fuzzy inference system in the body of an artificial neural network. Depending on the FIS type, there are several layers that simulate the processes involved in a fuzzy inference like fuzzification, inference, aggregation and defuzzification. Embedding an FIS in a general structure of an ANN has the benefit of using available ANN training methods to find the parameters of a fuzzy system.
Compositional pattern-producing networks (CPPNs) are a variation of ANNs which differ in their set of activation functions and how they are applied. While typical ANNs often contain only sigmoid functions (and sometimes Gaussian functions), CPPNs can include both types of functions and many others. Furthermore, unlike typical ANNs, CPPNs are applied across the entire space of possible inputs so that they can represent a complete image. Since they are compositions of functions, CPPNs in effect encode images at infinite resolution and can be sampled for a particular display at whatever resolution is optimal.
One-shot associative memory networks can add new patterns without the need for retraining. It is done by creating a specific memory structure, which assigns each new pattern to an orthogonal plane using adjacently connected hierarchical arrays. The network offers real-time pattern recognition and high scalability, it however requires parallel processing and is thus best suited for platforms such as Wireless sensor networks (WSN), Grid computing, and GPGPUs.
The multi-layer perceptron (MLP) is a universal function approximator, as proven by the Cybenko theorem. Artificial neural network models have a property called âcapacityâ, which roughly corresponds to their ability to model any given function. It is related to the amount of information that can be stored in the network and to the notion of complexity.
In applications where the goal is to create a system that generalizes well in unseen examples, the problem of overtraining has emerged. This arises in overcomplex or overspecified systems when the capacity of the network significantly exceeds the needed free parameters. There are two schools of thought for avoiding this problem: The first is to use cross-validation and similar techniques to check for the presence of overtraining and optimally select hyperparameters such as to minimize the generalization error. The second is to use some form of regularization. This is a concept that emerges naturally in a probabilistic (Bayesian) framework, where the regularization can be performed by selecting a larger prior probability over simpler models; but also in statistical learning theory, where the goal is to minimize over two quantities: the âempirical riskâ and the âstructural riskâ, which roughly corresponds to the error over the training set and the predicted error in unseen data due to overfitting.
Supervised neural networks that use an MSE cost function can use formal statistical methods to determine the confidence of the trained model. The MSE on a validation set can be used as an estimate for variance. This value can then be used to calculate the confidence interval of the output of the network, assuming a normal distribution. A confidence analysis made this way is statistically valid as long as the output probability distribution stays the same and the network is not modified.
By assigning a softmax activation function on the output layer of the neural network (or a softmax component in a component-based neural network) for categorical target variables, the outputs can be interpreted as posterior probabilities. This is very useful in classification as it gives a certainty measure on classifications. The softmax activation function is:





y
i

=



e

x
i




â

j
=
1

c

â¢

e

x
j




.





See (each of which is expressly incorporated herein by reference):
  âHow Each Reinforcer Contributes to Value: âNoiseâ Must Reduce Reinforcer Value Hypberbolicallyâ, Michael Lamport Commons, Michael Woodford, Edward James Trudeau âLeadership, Cross-Cultural Contact, Socio-Economic Status, and Formal Operational Reasoning about Moral Dilemmas among Mexican Non-Literate Adults and High School Studentsâ, Michael Lamport Commons, Jesus Francisco Galaz-Fontes, Stanley Jay Morse, âHierarchical Complexity Scoring System (HCSS) Applied to the Issues of Understanding Terrorism and Successfully Dealing with Itâ, Michael Lamport Commons, Alice Locicero, Sara Ross, Patrice Marie Miller âHierarchical Complexity Scoring System: How to Score Anything (also available in HTML)â, Michael Lamport Commons, Patrice Marie Miller, Eric Andrew Goodheart, Dorothy Danaher-Gilpin âReview: Human Development and the Spiritual Life: How Consciousness Grows toward Transformationâ, Michael Lamport Commons, Joel Funk âHierarchical Complexity: A Formal Theoryâ, Michael Lamport Commons, Alexander Pekker âOrganizing Components into Combinations: How Stage Transition Worksâ, Michael Lamport Commons, Francis Asbury Richards âIlluminating Major Creative Innovators with the Model of Hierarchical Complexityâ, Michael Lamport Commons, Linda Marie Bresette âSome Reflections on Postformal Thoughtâ, Helena MarchandâDevelopment of Behavioral Stages in Animalsâ, Michael Lamport Commons, Patrice Marie Miller âA Complete Theory of Tests for a Theory of Mind Must Consider Hierarchical Complexity and Stageâ, Michael Lamport Commons, Myra Sturgeon White âSociety and the Highest Stages of Moral Developmentâ, Gerhard Sonnert, Michael Lamport Commons âA Complete Theory of Empathy Must Consider Stage Changesâ, Michael Lamport Commons, Chester Arnold Wolfsont âA Quantitative Behavioral Model of Developmental Stage Based upon Hierarchical Complexity Theoryâ, Michael Lamport Commons, Patrice Marie Miller âThe Notion of Events and Three Ways of Knowing: Problems with Mentalistic Explanations, Freewill, Self, Soul, and Intrinsic Motivationâ, Michael Lamport Commons âStress, Consoling, and Attachment Interviewsâ, featuring Michael Lamport Commons âA Short History of the Society for Quantitative Analyses of Behaviorâ, Michael Lamport Commons âHierarchical Complexity of Tasks Shows the Existence of Developmental Stagesâ, Michael Lamport Commons, Edward James Trudeau, Sharon Anne Stein, Francis Asbury Richards, Sharon R. Krause Michael Lamport Commons, âStacked Neural Networks Must Emulate Evolution's Hierarchical Complexityâ, World Futures, 64: 444-451, 2008 A. Surendra Rao, âArtificial Neural Network Embedded Kalman Filter Bearing Only Passive Target Trackingâ, Proceedings of the 7th Mediterranean Conference on Control and Automation, Haifa, Israel, 1999. Marcello R. Napolitano, âKalman Filters and Neural-Network Schemes for Sensor Validation in Flight Control Systemsâ, IEEE Transactions on Control Systems Technology, Vol. 6, No. 5, pg. 596, September 1998. 
U.S. Pat. No. 6,347,297; U.S. Pat. No. 5,632,006; U.S. Pat. No. 5,517,598; U.S. Pat. No. 5,383,042; U.S. Pat. No. 5,333,125; U.S. Pat. No. 5,293,453; U.S. Pat. No. 5,177,746; U.S. Pat. No. 5,166,938; U.S. Pat. No. 5,129,038; and US App. 2009/0271189.
The missing ingredients in efforts to develop neural networks and artificial intelligence (AI) that can emulate human intelligence have been the evolutionary processes of performing tasks at increased orders of hierarchical complexity. Stacked neural networks based on the Model of Hierarchical Complexity could emulate evolution's actual learning processes and behavioral reinforcement. Modern notions of artificial neural networks are mathematical or computational models based on biological neural networks. They consist of an interconnected group of artificial neurons and nodes. They may share some properties of biological neural networks. Artificial neural networks are generally designed to solve traditional artificial intelligence tasks without necessarily attempting to model a real biological system. Computer systems or robots generally do not demonstrate signs of generalized higher adaptivity, and/or general learningâthe capacity to go from learning one skill to learning another without dedicated programming.
Traditional neural networks are limited for two broad reasons. The first has to do with the relationship of the neural network tradition to AI. One of the problems is that AI models are based on notions of Turing machines. Almost all AI models are based on words or text. But Turing machines are not enough to really produce intelligence. At the lowest stages of development, they need effectors that produce a variety of responsesâmovement, grasping, emoting, and so on. They must have extensive sensors to take in more from the environment. Even though Carpenter and Grossberg's (1990, 1992) neural networks were to model simple behavioral processes, however, the processes they were to model were too complex. This resulted in neural networks that were relatively unstable and were not highly adaptable. When one looks at evolution, however, one sees that the first neural networks that existed were, for example, in Aplysia, Cnidarians (Phylum Cnidaria), and worms. They were specialized to perform just a few tasks even though some general learning was possible. They had simple tropisms and reflexes as well as reflexive and tropistic (including semi fixed action patterns to simple reinforcers and punishers. They performed tasks at the earliest stage or stages of evolution and development. The tasks they successfully address were at sensory or motor order 1 of hierarchical complexity. The development of neural networks can emulate evolution's approach of starting with simple task actions and building progressively more complex tasks.
Hierarchical stacked computer neural networks (Commons and White, 2006) use Commons' (Commons, Trudeau, Stein, Richards, and Krause, 1998) Model of Hierarchical Complexity. They accomplish the following tasks: model human development and learning; reproduce the rich repertoire of behaviors exhibited by humans; allow computers to mimic higher order human cognitive processes and make sophisticated distinctions between stimuli; and allow computers to solve more complex problems. Despite the contributions these features can make, there remain a number of challenges to resolve in developing stacked neural networks.
Stacked neural networks should preferably be informed by evolutionary biology and psychology, and model animal behavioral processes and functions. Neural networks should start to work at hierarchical complexity order 1 tasks (Sensory or Motor), sensing or acting but not coordinating the two. For example, the task to condition reflexes, and to identify and reflexively or tropistically consume food means that stimuli have to be detected out of a background of noise. Also, certain dangers need to be escaped from. They then should work on their own sufficiently without requiring constant programming attention. They should be stable. Once they prove stable, then they can be programmed into a stack of neural networks that address hierarchical complexity order 2 tasks (Circular Sensory-Motor stage 2), depending on input and reinforcement. One should keep trying various architectures until one gets one that works well and is robust. Order 2 tasks require that two instances of order 1 tasks be coordinated to make possible the simply reinforcement correct choices to simple input signals.
The neural network at its base provides a negative power function discounting for past events to be operative. Negative discounting means that past and future events are weighted less the further from the present behavior. It makes the network more stable and adaptive. By discounting the past, it is more open to change based on new information. Because the updating places more weight on the immediate, it does not succumb so much to overlearning (Commons and Pekker, 2007). There should be a large number of such networks, each designed for a very specific task as well as some designed to be flexible. Then one should make a large group of them at stage 2.
With robots, one would reinforce correct answers at stage 2. At each stage, there should be different networks for different activities and tasks. At stage 1 and 2, very local networks (activities) are provided for each particular motion. This would include successful reflexes, tropisms at fixed action patterns at stage 1 and operant discriminations at stage 2 and conceptual learning at stage 3. These could be frozen by transferring them to standard neural networks. That is to take some of them, âdeclareâ them and thereby develop the hardware for them so each time one builds a network needing that functionality one does not need to train them.
Specialized neural networks are developed for all the domains to recognize the reinforcers and simple actions in these domains. Animal and human behavior and sensitivities have more to do with hierarchical complexity than with AI programs. There are unbelievable numbers of stage 1 and 2 mechanisms. The basic problem with traditional layered networks is that training has to have consequences. Consequences must include events the act as reinforcers or punishers. This requires that outcomes activate preferences. These preferences have to be state dependent. If a network is going to need electrical power, it must have a preference for such power. Obtaining and receiving such power should be reinforcing. They must also have consummatory behavior such as recognition of mate. The actual animal functions are important because intelligence grows out of actual, real world functions. Cross-species domains collected from readings to date include the following, each of which is a candidate for specialized neural networks: Mate selection; attachment and caring; pecking order; prey defense; predator action; way finding; food selection; choice in foraging; food sharing; migration; communication; social cohesion; recognition.
Animals, including humans, pass through a series of ordered stages of development (see âIntroduction to the Model of Hierarchical Complexity,â World Futures, 64: 444-451, 2008). Behaviors performed at each higher stage of development always successfully address task requirements that are more hierarchically complex than those required by the immediately preceding order of hierarchical complexity. Movement to a higher stage of development occurs by the brain combining, ordering, and transforming the behavior used at the preceding stage. This combining and ordering of behaviors must be non-arbitrary.
The model identifies fifteen orders of hierarchical complexity of tasks and fifteen stages of hierarchical complexity in development of performance on those tasks. According to this model, individual tasks are classified by their highest order of hierarchical complexity. The model is used to deconstruct tasks into the behaviors that must be learned at each order in order to build the behavior needed to successfully complete a task.
Hierarchical stacked computer neural networks based on Commons et al.'s (1998) Model recapitulate the human developmental process. Thus, they learn the behaviors needed to perform increasingly complex tasks in the same sequence and manner as humans. This allows them to perform high-level human functions such as monitoring complex human activity and responding to simple language (Commons and White, 2003, 2006).
They can consist of up to fifteen architecturally distinct neural networks ordered by order of hierarchical complexity. The number of networks in a stack depends on the hierarchical complexity of the task to be performed. The type of processing that occurs in a network corresponds to its stage that successfully addresses the tasks of that hierarchical complexity in the developmental sequence. In solving a task, information moves through each network in ascending order by stage. Training is done at each stage. The training is done until the network correctly addresses the task in a reasonable amount of the time Valued consequences are delivered at each layer representing each stage. This is in contrast to Carpenter and Grossberg (1990, 1992) who delivered feedback at just the highest stage.
The task to be performed is first analyzed to determine the sequence of behaviors needed to perform the task and the stages of development of the various behaviors of trial performances. The number of networks in the stack is determined by the highest order behavior that must be performed to complete the task. Behaviors are assigned to networks based on their order of hierarchical complexity. Stacked neural networks are straightforward up to the nominal order. However, a Nominal stage 4 concept cannot be learned without experience of the concrete thing named. There has to be actual reinforcement in relation to recognizing and naming that real object.
The sense of touch, weight, and all sensory stimuli need to be experienced as the concrete âitâ that is assigned the nominal concept. Virtual reality software programming techniques might generate such concretely experienced circumstances. The use of holograms may work effectively for such purposes.
Although historically, androids are thought to look like humans, there are other versions, such as R2-D2 and C-3PO droids, which were less human. One characteristic that evolution might predict is eventually they will be independent of people. They will be able to produce themselves. They will be able to add layers to their neural networks as well as a large range of sensors. They will be able to transfer what one has learned (memes) to others as well as offspring in minutes. Old models will have to die. They will have to resist dying. But as older, less capable, and more energy-intensive droids abound, the same evolutionary pressure for replacement will exist. But because evolution will be both in the structure of such droids, that is, the stacked neural networks, the sensors and effectors, and also the memes embodied in what has been learned and transferred, older ones are somewhat immortal. Their experience may be preserved.
We are already building robots for all manufacturing purposes. We are even using them in surgery and have been using them in warfare for seventy years. More and more, these robots are adaptive on their own. There is only a blurry line between a robot that flexibly achieves its goal and a droid. For example, there are robots that vacuum the house on their own without intervention or further programming. These are stage 2 performing robots. There are missiles that, given a picture of their target, seek it out on their own. With stacked neural networks built into robots, they will have even greater independence. People will produce these because they will do work in places people cannot go without tremendous expense (Mars or other planets) or not at all or do not want to go (battlefields). The big step is for droids to have multiple capacitiesâmulti-domain actions. The big problem of moving robots to droids is getting the development to occur in eight to nine essential domains. It will be necessary to make a source of power (e.g., electrical) reinforcing. That has to be built into stacked neural nets, by stage 2, or perhaps stage 3. For droids to become independent, they need to know how to get more electricity and thus not run down. Because evolution has provided animals with complex methods for reproduction, it can be done by the very lowest-stage animals.
Self-replication of droids requires that sufficient orders of hierarchical complexity are achieved and in stable-enough operation for a sufficient basis to build higher stages of performance in useful domains. Very simple tools can be made at the Sentential state 5 as shown by Kacelnik's crows (Kenward, Weir, Rutz, and Kacelnik, 2005). More commonly by the Primary stage 7, simple tool-making is extensive, as found in chimpanzees. Human flexible tool-making began at the Formal stage 10 (Commons and Miller, 2002), when special purpose sharpened tools were developed. Each tool was experimental, and changed to fit its function. Modern tool making requires Systematic and Metasystematic stage design. When droids perform at those stages, they will be able to make droids themselves and change the designs.
Droids could choose to have various parts of their activity and programming shared with specific other droids, groups, or other kinds of equipment. The data could be transmitted using light or radio frequencies or over networks. The assemblage of a group of droids could be considered a Super Droid. Members of a Super Droid could be in many places at once, yet think things out as a unit. Whether individually or grouped, droids as conceived here will have significant advantages over humans. They can add layers upon layers of functions, including a multitude of various sensors. Their expanded forms and combinations of possible communications results in their evolutionary superiority. Because development can be programmed in and transferred to them at once, they do not have to go through all the years of development required for humans, or for Superions (see âGenetic Engineering and the Speciation of Superions from Humans,â this issue). Their higher reproduction rate, alone, represents a significant advantage. They can be built in probably several months' time, despite the likely size some would be. Large droids could be equipped with remote mobile effectors and sensors to mitigate their size. Plans for building droids have to be altered by either humans or droids. At the moment, humans and their decedents select which machine and programs survive.
One would define the nature of those machines and their programs as representing memes. For evolution to take place, variability in the memes that constitute their design and transfer of training would be built in rather easily. The problems are about the spread and selection of memes. One way droids could deal with these issues is to have all the memes listed that go into their construction and transferred training. Then droids could choose other droids, much as animals choose each other. There then would be a combination of memes from both droids. This would be local âsexualâ selection.
This general scenario poses an interesting moral question. For 30,000 years humans have not had to compete with any species. Androids and Superions in the future will introduce competition with humans. There will be even more pressure for humans to produce Superions and then the Superions to produce more superior Superions. This is in the face of their own extinction, which such advances would ultimately bring. There will be multi-species competition, as is often the evolutionary case; various Superions versus various androids as well as each other. How the competition proceeds is a moral question. In view of LaMuth's work (2003, 2005, 2007), perhaps humans and Superions would both program ethical thinking into droids. This may be motivated initially by defensive concerns to ensure droids' roles were controlled. In the process of developing such programming, however, perhaps humans and Superions would develop more hierarchically complex ethics, themselves.
If contemporary humans took seriously the capabilities being developed to eventually create droids with cognitive intelligence, what moral questions should be considered with this possible future in view? The only presently realistic speculation is that Homo Sapiens would lose in the inevitable competitions, if for no other reason that self replicating machines can respond almost immediately to selective pressures, while biological creatures require many generations before advantageous mutations can be effectively available. True competition between human and machine for basic survival is far in the future. Using the stratification argument presented in âImplications of Hierarchical Complexity for Social Stratification, Economics, and Educationâ, World Futures, 64: 444-451, 2008, higher-stage functioning always supersedes lower-stage functioning in the long run.
Efforts to build increasingly human-like machines exhibit a great deal of behavioral momentum and are not going to go away. Hierarchical stacked neural networks hold the greatest promise for emulating evolution and its increasing orders of hierarchical complexity described in the Model of Hierarchical Complexity. Such a straightforward mathematics-based method will enable machine learning in multiple domains of functioning that humans will put to valuable use. The uses such machines find for humans remains an open question.
  Bostrom, N. 2003. Cognitive, emotive and ethical aspects of decision making. In Humans and in artificial intelligence, vol. 2, Eds. Smit, I., et al., 12-17. Tecumseh, ON: International Institute of Advanced Studies in Systems Research and Cybernetics. Bostrom, N., and Cirkovic, M., Eds. Forthcoming. Artificial intelligence as a positive and negative factor in global risk. In Global catastrophic risks, Oxford: Oxford University Press. Carpenter, G. A., and Grossberg, S. 1990. System for self-organization of stable category recognition codes for analog patterns. U.S. Pat. No. 4,914,708, filed (n.d.) and issued Apr. 3, 1990. (Based on Carpenter, G. A. and Grossberg, S. 1987. ART 2: Selforganization of stable category recognition codes for analog input patterns. Applied Optics: Special Issue on Neural Networks 26: 4919-4930.) Carpenter, G. A., and Grossberg, S. 1992. System for self-organization of stable category recognition codes for analog patterns. U.S. Pat. No. 5,133,021, filed Feb. 28, 1990, and issued Jul. 21, 1992. (Based on Carpenter, G. A. and Grossberg, S. 1987. ART 2: Selforganization of stable category recognition codes for analog input patterns. Applied Optics: Special Issue on Neural Networks 26: 4919-4930.) Commons, M. L., and Miller, P. M. 2002. A complete theory of human evolution of intelligence must consider stage changes: A commentary on Thomas Wynn's Archeology and Cognitive Evolution. Behavioral and Brain Sciences 25(3): 404-405. Commons, M. L. and Pekker, A. 2007. A new discounting model of reinforcement. Unpublished manuscript, available from commons@tiac.net Commons, M. L., Trudeau, E. J., Stein, S. A., Richards, F. A., and Krause, S. R. 1998. The existence of developmental stages as shown by the hierarchical complexity of tasks. Developmental Review 8(3): 237-278. Commons, M. L., and White, M. S. 2003. A complete theory of tests for a theory of mind must consider hierarchical complexity and stage: A commentary on Anderson and Lebiere target article, The Newell Test for a theory of mind. Behavioral and Brain Sciences 26(5): 20-21. Commons, M. L., and White, M. S. 2006. Intelligent control with hierarchical stacked neural networks. U.S. Pat. No. 7,152,051, filed Sep. 30, 2002, and issued Dec. 19, 2006. Kenward, B., Weir, A. A. S., Rutz, C., and Kacelnik, A. 2005. Tool manufacture by naÃ¯ve juvenile crows. Nature 433(7022): 121. DOI 10.1038/433121a. LaMuth, J. E. 2003. Inductive inference affective language analyzer simulating artificial intelligence. U.S. Pat. No. 6,587,846, filed Aug. 18, 2000, and issued Dec. 5, 2000. LaMuth, J. E. 2005. A diagnostic classification of the emotions: A three-digit coding system for affective language. Lucerne Valley, Calif.: Reference Books of America. LaMuth, J. E. 2007. Inductive inference affective language analyzer simulating artificial intelligence. U.S. Pat. No. 7,236,963, filed Mar. 11, 2003, and issued Jun. 26, 2007. Reilly, M., and Robson, D. 2007. Baby's errors are crucial first step for a smarter robot. New Scientist, 196(2624): 30. 
Unsolicited Communications
Spam is unsolicited and unwanted âjunkâ email, often of a commercial or distasteful nature, that email users prefer not to receive (as opposed to âcleanâ email messages that users receive from their colleagues and business associates). To protect users from spam, many email providers have spam filters, which either delete unwanted messages immediately, send unwanted messages to a separate âspamâ folder, or send users a digest of all the spam messages that they can quickly review to make sure there is nothing of interest. These spam filters typically operate by excluding messages that come from certain senders, include certain attachments or contain certain words, or by permitting messages only from authorized senders. Prior art spam filtering techniques are discussed in several issued US patents. For example, in U.S. Pat. No. 7,299,261, incorporated herein by reference, Oliver discusses an exemplary message classification technique based on verifying the signature on the message (certain email addresses are known sources of spam) and reviewing the content for key information, for example if it includes a word or phrase that is indicative of spam. In U.S. Pat. No. 7,680,886, incorporated herein by reference, Cooley mentions a machine learning based spam filter. Under Cooley's scheme, messages that an owner of an email account sends are defined to be clean. Messages that the owner receives are initially classified as spam or clean based on preset criteria, but user corrections are taken into account, so it is hoped that over time the spam filter becomes more accurate. Cooley suggests that a Bayesian classifier or a support vector machine can be used as a spam/clean classifier. In addition, Cooley notes that a message might be passed through a fast, non-machine learning based spam filter before going through a machine learning based spam filter due to the fact that the non-machine learning spam filter is faster and could reduce the burden on the operation of the machine learning spam filter by removing the most obvious spam messages most quickly and leaving only more difficult cases to the machine learning filter.
Typical neural networks are not modeled on the cognitive development of the human brain. However, the inventors have developed a cognitive hierarchical stacked neural network. See, U.S. Pat. No. 7,152,051, expressly incorporated herein by reference.
The simplest prior-art artificial neural networks (ANNs) comprise an interconnected set of artificial neurons. Signals pass between artificial neurons over predetermined connections. Each neuron typically receives signals from a number of other neurons. Each connection between one neuron and another has a weight associated with it that represents the strength of the sending neuron's signal. In more advanced paradigms, the weight can change based on a pattern of activity of signals over the connection, or signals over other connections. This change can be persistent, or revert to the nominal response, over time, etc. An activation function associated with the receiving neuron multiplies and sums the weights of the signals that it receives from other neurons and computes whether the neuron will fire. When the neuron fires, it sends signals that either activate or inhibit other internal neurons or cause the network to output an external response. In more advanced paradigms, the neuron output can be an analog value or time-variant function. Connection weights between neurons are adjusted, e.g., by training algorithms based on the neural network's production of successful outputs. These connection weights comprise the neural network's knowledge or learning.
To increase the capacity of prior-art neural networks to solve problems accurately and to expand their abstract abilities, some prior-art neural networks comprise more than one neural network. Architecturally distinct neural networks are linked to other networks hierarchically, in parallel, in tree structures, or in other configurations. Such linked neural networks allow greater levels of abstraction and multiple views of problems. In prior-art neural networks that are linked hierarchically, information moves up through the system of neural networks, with output from each lower-level neural network cascading up to the level above it. The lower levels identify patterns based on the input stimuli. These patterns are then fed to the higher levels, with input noise reduced and with increasingly narrow representations identified, as output from one neural network moves to the next. In this movement through the series of networks, a winnowing process takes place, with information reduced as decisions are made concerning the identity of the object or concept represented by a pattern. In the process of eliminating the noise in the input stimuli, the complexity, subtlety, and meaning of information may be lost. Neural networks at higher levels operate on information more remote from the raw data than neural networks at lower levels, and their tasks become more abstract. The result is that certain complexity and context, which might be critical for decision-making and data interpretation, are lost. Therefore, when an ANN at one hierarchical level in a stacked network is dedicated to a new task, if its training does not require it to preserve particular aspects of the input, this will be lost from higher level consideration.
Motor network control systems, or computers which control external mechanical devices, are known in the art. See, e.g., U.S. Pat. No. 6,686,712, U.S. Pat. No. 5,576,632, and US App. 2008/0144944, each of which is expressly incorporated herein by reference. Genetic algorithms are search or computation techniques to find exact or approximate solutions to optimization and search problems. See, generally, Wikipedia: Genetic Algorithm, available at en.wikipedia.org/wiki/Genetic_algorithm, last accessed May 18, 2010. Several models and uses of genetic algorithms are known in the art. See, e.g., US App. 2010/0103937, US App. 2010/0094765, US App. 2009/0327178, US App. 2009/0319455, US App. 2009/0307636, US App. 2009/0271341, US App. 2009/0182693, US App. 2009/0100293, US App. 2009/0012768, US App. 2008/0267119, US App. 2008/0140749, US App. 2008/0109392, US App. 2008/0010228, US App. 2007/0251998, US App. 2007/0208691, US App. 2007/0166677, US App. 2007/0133504, US App. 2007/0106480, US App. 2007/0094164, US App. 2007/0094163, US App. 2007/0024850, US App. 2006/0230018, US App. 2006/0229817, US App. 2005/0267851, US App. 2005/0246297, US App. 2005/0198182, US App. 2005/0197979, US App. 2005/0107845, US App. 2005/0088343, US App. 2005/0074097, US App. 2005/0074090, US App. 2005/0038762, US App. 2005/0005085, US App. 2004/0210399, US App. 2004/0181266, US App. 2004/0162794, US App. 2004/0143524, US App. 2004/0139041, US App. 2004/0081977, US App. 2004/0047026, US App. 2004/0044633, US App. 2004/0043795, US App. 2004/0040791, US App. 2003/0218818, US App. 2003/0171122, US App. 2003/0154432, US App. 2003/0095151, US App. 2003/0050902, US App. 2003/0046042, US App. 2002/0156752, U.S. Pat. No. 7,698,237, U.S. Pat. No. 7,672,910, U.S. Pat. No. 7,664,094, U.S. Pat. No. 7,657,497, U.S. Pat. No. 7,627,454, U.S. Pat. No. 7,620,609, U.S. Pat. No. 7,613,165, U.S. Pat. No. 7,603,325, U.S. Pat. No. 7,552,669, and U.S. Pat. No. 7,502,764, each of which is expressly incorporated herein by reference.
SUMMARY OF THE INVENTION
The present invention relates to the use of hierarchical stacked neural networks that learn through processing information and constructing new actions in a manner that simulates cognitive development in the human brain in detecting aberrant messages, for example, spam messages in email and similar services. Neural networks are used to build systems that learn and make complex decisions in the same manner as the human brain. The present invention applies models of the ordered stages that the brain moves through during development that allow it to perform increasingly complex actions at higher stages of development to the task of detecting aberrant messages, such as email spam. Similar neural networks were described by Commons and White in a previous patent, U.S. Pat. No. 7,613,663, incorporated herein by reference. In this developmental process, actions performed at a particular stage of development are created by ordering, combining, and transforming the actions performed in the immediately preceding stage. As a result of this process, at each stage of development more complex actions can be performed than those performed at the immediately preceding stage.
Actions include all operations performed by a neural network that result in a change of state of the system. Actions are combined to perform tasks. More complex actions permit the performance of more complex tasks. Likewise, that higher the stage of performances permit the performance of more hierarchically complex tasks. It is an object of the present invention to provide hierarchical stacked neural networks that overcome the limitations of the neural networks of the prior art for use in spam filtering. It is another object of the present invention to take advantage of the large amounts of âcognitive noiseâ in spam messages to spam detection. This can be accomplished by creating ânoise vectorsâ measuring the amount of spelling and grammar errors and incomprehensible writing in a text message. Text that has a large amount of noise, either in terms of misspelled words and non-words, or in terms of poor grammar and incomprehensible combinations of words, is flagged as likely spam.
In one embodiment, noise is information that is uncorrelated with or has only a weak correlation with the signal of interest. For example, in an image processing program designed to detect and classify furniture, the signal of interest is a signal that would suggest that a certain part of the image corresponds to a table, a chair, a lamp, a sofa, etc. Information that a part of the image is not a chair is also a signal because the negative classifications are also relevant to the processing task at hand. However, there is some information that is completely irrelevant to classifying a part of the image as a type of furniture. For example, if the image is from a video comprising oral speech, the content of the speech might be irrelevant to furniture classification and thus constitute noise. (Of course, it is possible to conceive of an embodiment where this information is relevant. For example, if a teacher in a French class says, âCâ²est une chaise,â while pointing to an object, it is likely that the object to which the teacher is pointing is a chair.)
It is another object of the present invention to provide linked but architecturally distinct hierarchical stacked neural networks that simulate the brain's capacity to organize lower-order actions hierarchically by combining, ordering, and transforming the actions to produce new, more complex higher-stage actions. In other words, lower levels of neural networks complete simpler tasks than higher levels. For example, in spam filtering, lower levels would focus on recognizing text as text, separating text into letters, and organizing text into strings of letters, while higher level neural networks would detect and attempt to understand words and even higher levels would detect an excess of poorly structured words or sentences.
It is a further object of the present invention to provide hierarchical stacked neural networks that are ordered in a non-arbitrary fashion so that actions performed by neural networks at a higher level are the product of a concatenation of actions performed by lower-level networks in the hierarchy. In other words, lower level neural networks would provide output that would be used as input in the higher levels.
The present invention provides an architecture of hierarchically linked, distinct neural networks designed for spam filtering stacked one on top of the other. Each neural network in the hierarchical stack keeps track not only of the data it can glean from the input, as in prior-art neural networks, but it also focuses on âcognitive noiseâ and produces an error vector or a similar means of determining the extent of the imperfections in the information transmitted. Messages that have many mistakes at one level but few mistakes at the level immediately below, e.g. all the characters are valid English characters, but the words are all misspelled or all the words are valid English words, but there is no sentence structure, are flagged as potential spam. The actions and tasks that each neural network performs and the order in which they perform those actions and tasks are based on human cognitive development. Prior art neural networks typically ignore âcognitive noiseââmistakes or errors in an imperfect transmission of information, such as spelling or pronunciation mistakes. Cognitive noise could be useful in spam filtering because spam messages tend to have a higher degree of misspelled words, non-words, errors in sentence structures, and combinations of words that do not make sense together than âcleanâ social and business email messages written by professionals. In addition, spam messages tend to greatly increase in cognitive noise from one âneural levelâ to the next. For example, a message with coherent letters and spaces, but incoherent and frequently misspelled words is likely spam. In addition, a message with coherent individual words, but poor sentence structure or word combinations that do not make sense (e.g. âI princess Nigeria money necessaryâ) is also likely spam. To solve this problem in the prior art, the instant invention provides ânoise vectorsâ which measure the increase in noise from one level of cognition to the next. In typical communication, each neural level adds a level of sophistication to the one below it. That is, the words make more sense than the underlying characters or phonemes, and the sentences or phrases are more sophisticated than the words. This is not necessarily true of spam, at least a portion of which may convey no meaningful message, or an inconsistent message, at a higher level of analysis, while not generating significant exceptions at lower levels of analysis. To take advantage of this feature in spam detection, the instant invention proposes to track ânoise vectorsâ which measure the increases in noise or the decreases in signal sophistication from one neural level to the next. If the noise vector indicates a large decrease in sophistication, a spam flag is provided in output.
While the ânoise vectorâ is useful with respect to recognized objects or actions, it will produce false results with respect to unrecognized, but nevertheless valid, objects or actions. One way to supplement training of the neural network is to provide a generic set of pattern recognizers (not necessarily neural network implemented) which trigger upon detection of a pattern, but a pattern that is not recognized. That is, a recognized pattern normally produces a highly correlated response within the network, while an unrecognized pattern will produce a broad, but subthreshold response from many neurons. The pattern recognizers may be statistically based, rule based, or the like, and extract the âobjectâ having an unrecognized pattern from the input space of the ANN system. Advantageously, the unrecognized pattern may be presented to a knowledge base as a query, which will then return either an âidentificationâ of the object, or information related to the object. Since the neural network is not trained to recognize or make decisions in dependence on that object, the goal here is to pass the âidentificationâ or a token linked to the related information to a higher hierarchical network. At the next higher level, the unrecognized object may be deemed relevant, i.e., produces a specific response in the network, or âidentificationâ or token may be passed further up the hierarchical chain. In some cases, the network, in conjunction with its own pattern recognizers may further process the unrecognized object(s), and thus is not limited to passing identical information upstream to that it receives. In other cases, the normal flow of information processed by the neural network will indicate a recognized object at one level, but will fail to elicit a response at a higher level. However, the information may still represent an unrecognized pattern, and this technique may therefore be used to supplement the training of a stacked neural network to permit new information to be passed to successively higher levels of the hierarchy without undue filtering or transformation limited by past training. In a more general sense, this technique permits a vast and dynamic knowledge base to be integrated into the neural network scheme, and thus avoid a need for retraining of the neural network as the environment changes. Thus, in a typical hierarchical artificial neural network, only patterns recognized based on past training are passed to higher levels, with each level acting as a filter. Such a paradigm permits recognition of objects, but not dynamic and appropriate responses to new situations, objects or combinations. This, in turn, permits new organizations of information at a low level to be presented for processing at more abstract levels. In terms of the known hierarchical stacked neural networks, in which the information passed to successively higher levels as non-arbitrary organizations of actions, see U.S. Pat. No. 7,613,663, expressly incorporated herein by reference, this method provides, in addition, an arbitrary organization of actions (e.g., identification or information relating to an unrecognized object), which might nevertheless be relevant to a higher level processing. A feedback path is provided from the higher level, which can then address the object; in some cases, it may be thereafter recognized through the normal neural network pathway; in other cases, the query to the knowledge base is modified or further defined; and in still further cases, a recognition and suppression of the object is defined. The knowledge base need not be intrinsic to the hierarchical neural network system, and indeed it is preferably an external resource that is maintained up to date. For example, the knowledge base may be one or more databases available from Google or Microsoft or Yahoo! or similar Internet providers. The neural network at each level preferably includes logic for formulating an external search of an appropriate database or databases in dependence on the type of information and/or context, and for receiving and interpreting the response. In some cases, the object is readily identified, and based on that identification, processed within the same level. For example, in a semantic network, a new word may be encountered. Reference to a knowledge base may produce a synonym, which the neural network can then process. Depending on the application, the substitution may terminate further exception processing, or a flag of the issue passed to higher levels, for example if the use of the new word has other impact on the analysis, for example as part of a literary allusion. Similarly, a symbol might appear in conjunction with text, which can then be searched in the knowledge base, for example yielding an emoticon identification. The emoticon identification is then passed to a higher level, where, for example, a sarcastic tone to a message is concluded. This technology also is useful in conjunction with networks outside the semantic space. For example, a visual image may be used to generate a query in a so-called content-based image recognition (CBIR) system or query by image content (QBIC) system. A search of an image database based on an input image may yield either a specific identification of the image or object within the image, or, for example, a body of text which describes the image or is contextually appropriate for the image. As with the semantic network, the identification or related information can be used at the same level, or passed to a higher level. In some cases, an unrecognized object is identified at a relatively higher level than first encountered. In some cases, the system may return the identification back to the lower level, for reprocessing within the non-arbitrary organizations of actions which are part of the normal neural network scheme. Of particular importance here is that the identification may be context sensitive, and thus a generic description or identification may be less helpful. On the other hand, by passing the now-identified object through the normal neural network processing channels, the benefit of the network training is gained, and the impact on, and interrelation of, all of the objects or actions within the realm of the neural network explored. Thus, the higher level networks need not replicate the lower level processing in order to accommodate new objects.
While different models have been developed of the stages of cognitive development, all share the following common features. Cognitive development in human beings proceeds through a series of ordered stages. Actions and tasks performed at a particular stage are always more complex than the actions and tasks performed in the immediately preceding stage. The capacity to perform the actions at the higher stage results from a learning process that combines, orders, and transforms the actions at the immediately preceding stage. The creation of higher-stage actions from immediately preceding lower-stage actions provides the higher stage with the capacity to perform more complex tasks. (R. Case (1987) âThe structure and process of intellectual developmentâ International Journal of Psychology 22(5-6), 571-607; M. L. Commons et al. (1998), âThe existence of developmental stages as shown by the hierarchical complexity of tasks.â Developmental Review 8 (3), 237-278; M. L. Commons & P. M. Miller (1998), âA quantitative behavior-analytic theory of developmentâ Mexican Journal of Experimental Analysis of Behavior, 24 (2), 153-180; K. W. Fischer (1980) âA theory of cognitive development: The control and construction of hierarchies of skillsâ Psychological Review 87(6), 477-531.)
An example of this increasing complexity is shown by the complex multi-dimensional actions that can be performed by solving problems with matrix algebra rather than simpler one-dimensional algebraic equations. In matrix algebra the actions performed in one-dimensional algebra are combined, reordered, and transformed in a manner similar to what occurs during human cognitive development. This development of a new conceptual structure makes it possible for to perform with matrix algebra more sophisticated and complex mathematical operations than with simple algebra.
Another example of how more complex actions are performed at a higher stage is illustrated by the early cognitive development of children. At one of the earliest stages of human cognitive development, an object only exists for a child when it is present. At a later stage, the child is able to retain an abstract representation of the object when it is not present. The actions that the child used to represent the object when it was present have been combined, reordered, and transformed to permit the child to retain an internal representation of the object when it is not present.
The number of neural networks in a hierarchical stack of the present invention is based on research on the cognitive organization of the brain. This research shows that the number of stages or orders needed to accomplish any given task depends directly on the order of hierarchical complexity of the tasks to be performed. (See M. L. Commons, et al., supra; M. L. Commons & P. M. Miller, supra. The research literature on human cognitive development uses term âstageâ to denote a level of development; the term âorderâ, to distinguish between levels and to denote the hierarchical sequence of networks.)
The number of networks in a hierarchical stacked neural network of the present invention is determined through an analysis of the tasks to be performed. The number always equals the highest order of hierarchical complexity of any task performed. Thus, if a neural network of the present invention is to perform the more advanced functions of a human brain, such as driving a car, the number is determined by the order of the most complex task needed to accomplish this behavior.
This number of networks is unlimited. Indeed, a hierarchical stacked neural network of the present invention may surpass the capabilities of the human brain. Humans can (in maximal, rare cases) process task demands of up to fourteen stages/orders of hierarchical complexity. (M. L. Commons & F. A. Richards, âFour postformal stagesâ, in J. Demick (Ed.), Handbook of adult development (New York, Plenum, 2002)). Robotic and decision-making systems running hierarchical stacked neural networks of the present invention, however, are not limited to 14 stages/orders. Thus, for example, a system designed to diagnose diseases could consider all known factors affecting a disease at once and not be limited, as human physicians are, to consider problems only within their specialties. Moreover, a robotic system that drives a car could sample far more control parameters and domains of environmental stimuli and thus make safer, more accurate driving decisions than could a human.
It is noted that the individual networks may themselves be modified with respect to a nominal neural network; as discussed above, it may be supplemented with a knowledge base search facility, statistical pattern recognizers, or other logical or rule-based elements, and which may receive and transfer information outside the confines of the hierarchical neural network structure. Thus, in turn, permits a âbest of breedâ approach toward implementing defined functions, rather than requiring that all of the essential or optional functions to be implemented using neural networks in a strictly hierarchically stacked architecture. In general, the highest level of the stacked network should produce an output or set of outputs similar to a traditional neural network; otherwise, the relevant information appears to âbypassâ the neural network analysis, and the system is treated as presenting the neural network output component alongside additional information for logical analysis by another system. While this result is permissible in some cases, the benefits of the neural network architecture appear diminished if the bypass information is not fully considered by the highest cognitive level of the network. The actions performed in the first neural network in a hierarchical stacked neural network of the present invention are the lowest stage/order actions in the sequence of actions to be performed. The actions performed in each successively higher-level neural network in the hierarchical stack are a product of combining, ordering, and transforming the actions in the immediately preceding neural network in the hierarchical stack. This combining, ordering, and transforming makes it possible for each successive neural network in the hierarchical stack to perform more complex tasks and solve more difficult problems than the neural network in the immediately preceding stage/order. As a result, higher-level neural networks in the hierarchical stack of the present invention begin to more closely simulate the human brain's capacity to interrelate complex input stimuli and create meaning, and, as a consequence, respond appropriately to an ever-widening band of environmental and internal stimuli.
In the present invention, higher-level neural networks communicate with lower level neural networks in the hierarchical stacked neural network. The higher-level neural networks provide feedback to the lower-level neural networks to adjust connection weights, thereby improving the accuracy of the actions performed at the lower levels. The higher-level neural networks can also request that additional information be fed to the lowest neural network in the stacked hierarchy.
For the hierarchical stacked neural network of the present invention to perform tasks such as driving a car, the network must learn lower-order tasks before higher-order tasks. Training begins with the first neural network in the hierarchical stack and ends with the last neural network in the stack. Output from each neural network provides the training input for the next higher neural network in the hierarchical stack. A neural network can also be trained by transferring the contents of a previously-trained neural network at the same stage/order of hierarchical complexity. This transfer requires reading the state of every node of the trained network and setting the nodes in the new network to the same values. Thus the learning gained by a neural network at a particular stage/order can reduce the learning curve for neural networks in a hierarchical stacked neural network.
Briefly stated, the present invention provides an intelligent control system for spam filtering, that is based on increased levels of human cognition coupled with an error detector for noticing errors or noise at each level. It comprises up to O stacked neural networks, Nm, . . . , Nm+(Oâ1), where m denotes the stage/order tasks that are performed in the first neural network, Nm, in the hierarchical stack, and O denotes the highest stage/order tasks that are performed in the highest-level neural network in the hierarchical stack. The type of processing actions that are performed in a network, Nm, corresponds to the order of task complexity for stage/order m. Thus N1 performs tasks at the order of hierarchical complexity corresponding to stage/order 1. N5 processes information at the order of hierarchical of complexity corresponding to stage/order 5. Stacked neural networks in intelligent control systems can begin at any stage/order and end at any stage/order, but information must be processed by each stage in sequence of ascending order. Stages/orders cannot be skipped. For example, if a stacked neural network begins at N3 and ends at N6, information would first be processed by N3 and then output to N4. N4 would then process the information and output it to N5. N5 would process the information and output it to N6, which would produce the final output of the stacked neural network. Each neural network in a stack may use different architectures, interconnections, algorithms, and training methods, depending on the stage/order of the neural network and the type of intelligent control system implemented.
According to an embodiment of the invention, a stacked neural network comprises a plurality of architecturally distinct, ordered neural networks; the plurality being organized in a hierarchy from lower to higher order/stages in a model of cognitive development; each member of the plurality feeding signals forward and back to other members of the plurality; the signals being defined in terms of actions available to the each member, whereby the each member transforms actions from at least two or more members at a lower order/stage, thereby producing nonarbitrary organizations of the actions from the at least two or more members at a lower order/stage effective for completing new tasks of increased complexity; the nonarbitrary organizations being fed to at least one member at a higher order/stage; and the nonarbitrary organizations being modifiable by feedback signals from members at the higher order/stages.
The âcognitive noise vectorâ and the unrecognized object information are related, in that each represents all or a portion of the rejected information processed by the neural network operating as a filter. Traditionally, the an artificial neural network is trained or constructed so as to efficiently parse the presented information, extract that which is deemed ârelevantâ, and ignore the remainder. One particular aspect of various embodiments of the present invention is the use, analysis and/or propagation of information or inferences from this remainder, and indeed, the system may be configured to optimally employ the extra-neural network pathway. Thus, while in some cases, the neural network may be optimally trained, and then the âremainderâ subject to further analysis, in other cases, the composite system with both neural network and extra-neural network pathway are together trained. Indeed, the extra-neural network pathway may itself comprise neural networks; however, if present, these are not constrained in the same ways as the hierarchical stacked neural network portions.
Ideally, the information derived from the extra-neural network pathway is presented to the neural network pathway within the context of the non-arbitrary organization of actions and/or feedback for each stage; therefore, the input structures for each composite network at any hierarchical level is unified. Of course, the input may be modified to handle this âunexpectedâ information. The extra-neural network pathway therefore supplements the output space to provide the possibility of an arbitrary or semi-arbitrary organization of action (at least with respect to the training paradigm) nevertheless being propagated through the system. In terms of permitting a learning system, the extra-neural network pathway permits access to a dynamic knowledge base or multiple knowledge bases, without requiring retraining a neural network and/or semi-permanent modifications for temporary effects. This, in turn, allows the basic neural network architecture to be stabilized, while accepting of new data for analysis, disambiguation, filtering, decision-making, control, or other purposes.
For example, a motor neural network may be used to control a machine. The machine itself may comprise a standard proportional-integral-differential (PID) control. Typically, a neural network control would seek to replace or override the embedded control; in the present case, the PID control is used to complement the neural network, as a consistent part of the architecture.
The above, and other objects, features, and advantages of the present invention will become apparent from the following description read in conjunction with the accompanying drawings, in which like reference numerals designate the same elements. One aspect of the present invention relates to a system and method for detecting an aberrant message. The first step is receiving a message having a type. The type could be a written or spoken language, e.g. English, French, etc., or it could be a structure for a biological molecule (protein, DNA, RNA, etc.). Alternatively, the type could refer to a programming language, such as Java or C++. The next step is to detect an ordered set of words or elements within the message. The words could be spoken or written words in a language, the individual components of a biological molecule or the command âwordsâ in a programming language. Persons skilled in the art will recognize many different forms the message could have. For example, the message might be an email message, a voice message, a search query or an input to a scientific or other computer program. Typically, such messages have a âmeaningâ or content, and for example are distinguished from a random assemblage of words or letters. In the next step, the set of words found in the message are linked to a corresponding set of expected words. The set of expected words might be a dictionary of the written language in which the text is written, a trade dictionary further comprising terms used in one or more arts, a dictionary of the components of the biological molecule or the expected words in a biological sequence, or a dictionary of commands in a programming language. The set of expected words should have semantic attributes. For example, spoken and written languages have rules of grammar. Programming languages have similar rules for marking the beginning and end of commands. The representations of biological molecules also have structural rules. A set of grammatical structures is then detected in the message, based on the ordered set of words and the expected semantic attributes corresponding to them. In some cases, the input message will not have perfect spelling and grammar. The difference between the input message and a message of perfect spelling and grammar will be represented in a âcognitive noise vector.â The cognitive noise vector is a quantitative measure of a deviation between the grammatical structures represented in the message and an expected measure of grammatical structures for a message of the type. Persons skilled in the art will recognize many different such measures. For example, the cognitive noise vector could measure errors in spelling or errors in grammatical structure, such as sentence structure and punctuation. If the message is spoken, pronunciation errors could also be measured. In one embodiment, the magnitude of the cognitive noise vectors reflects the magnitude of the spelling and grammar errors in the input message. It is noted that in some cases, the âcognitive noise vectorâ is intrinsic to the neural network implementation, and requires no extra-neural network pathway, while in others, the neural network system extracts and operates on the core information, while an extra-neural network pathway is provided to operate on these deviations from accepted norms. Indeed, both pathways may be present, and in all or part, redundant. The consistency of analysis by the neural and extra-neural pathways may itself be useful information, especially to the extent that the neural pathway operates on a set of expectations while the extra-neural pathway may operate using different paradigms. A further step in the process is to produce an output for communication and/or storage, which may be an indicia based on the cognitive noise vector or extra-neural pathway. In one embodiment of the invention, the indicia could be a Boolean value representing whether the message is likely to be, or probably is, spam. In another embodiment, the indicia could be an integer or a real number representing the frequency and/or magnitude of spelling and grammar mistakes or the probability that the message is spam. In this case, the indicia may represent not only a probability, but also a probability distribution or other descriptors. In yet another embodiment, the indicia could be the full cognitive noise vector, comprising all of the mistakes or deviances from an expectation the author of the message made, and an indicia of their weight or severity. Therefore, in this case, the indicia is processed, and generally not communicated as raw data. In other implementations, the âerrorâ signal or a derivative thereof is passed as such to other neural network layers for processing. In some cases, a pattern of relevant information invisible to the current level may be within the comprehension and/or processing capability of another network; indeed, to the extent that the other level network comprehends the information, a feedback (or feed-forward) signal within the network may be generated to permit reprocessing of the data within the neural network, and thus diminish the cognitive noise factor or extra-neural network contribution. As discussed above, typically it is desired to have the main processing of information through the hierarchical neural network architecture, though in some cases, efficiency may be gained by employing particular attributes of an extra-neural network pathway. For example, if the message is or can be identified as a biological sequence or computer programming language, a special purpose process may be invoked specific for these domains, which need not be neural network based. In some cases, a domain specific processor produces an output suitable for higher level networks, and thus such specific information may bypass intervening neural network layers as may be appropriate. Preferably, as part of a generic architecture, the bypass is through the hierarchy, and not around it, thus permitting the neural network and/or extra-neural network to operate on the data stream as appropriate, and without a system architect making a priori determinations of system actions. This, in turn, permits retraining and substitution of network layers, without re-architecting the entire stacked system.
It is noted that, while the hierarchical stacked neural network may be implemented as discrete hardware elements, in many embodiments, the neural networks will be defined as computer instruction codes and data stored in a computer memory, such as random access memory, flash memory, magnetic and/or optical memory, ferromagnetic memory, or the like. Assuming the hierarchy is strictly implemented, the processing of data commences at the lowest level, to produce the non-arbitrary organization of actions and optionally a cognitive noise vector or extra-neural output, or arbitrary or non-pre-defined action, which is then stored and used as an input (along with feedback or feed-forward controls) to the next hierarchical layer. As discussed above, in some cases, a layer will have to be reloaded, for revised action, and presumably the entire hierarchy above that layer would also have to be processed, unless the system is configured to produce a usable output from an intermediary layer. Indeed, the system may be configured for iterative processing of signals, for example with implementation of a genetic algorithm or other permutative algorithm, or a multipass algorithm.
In one embodiment of the invention, two cognitive noise vectors are determined. The two cognitive noise vectors might represent different measures of grammatical mistakes. For example, one cognitive noise vector might correspond to spelling and another cognitive noise vector might correspond to punctuation and word order. More generally, each identified degree of freedom or attribute (characteristic) may be separately represented, and thus there is no theoretical limit on the number of such vectors. Likewise, the vector may be a multidimensional which itself distinctly represent these multiple characteristics, or composite characteristics.
In one embodiment, the system and method involve a design based on skipped or bypassed cognitive orders and stages. In other words, ânoise,â which fails to specifically excite or suppress a trained network of neurons is forwarded to a higher level of the hierarchical stacked neural network, or other processor, for further processing.
In one embodiment, âcognitive noiseâ provided as output in one layer of the neural network is ignored at the next layer but processed for meaning at a higher layer later on in the processing. For example, an email message might state, âThis is the new car that I just purchased,â and include a signature file such as follows:
    \\\|/// \\ - - // ( @ @ )

+----------oOOo-(â)-oOOo---------+
   
The signature file might be treated as cognitive noise in the layer that is looking for letters and converting the letters into words and words into sentences. However, when analyzed for meaning in conjunction with the words, the signature file could add âobject representationâ information.
Another example involves processing an opera in a foreign language (in which the human or processor was not trained to work). While the phonemes are recognized as such, the phonemes are not combined to make understandable words and sentences. Nevertheless, the cognitive noise produced by the phonemes can be combined with the actions of the actors and the tone of the music in order to ascertain a meaning, and thereby permit the network to learn aspects of the new language.
In yet another embodiment, information about a speaker can be gleaned from cognitive noise. The neural network would be trained to convert phonemes into meaningful words and sentences. However, if the speaker's pronunciation and grammar are different from what the processor expects, the processor can conclude that the speaker is a foreigner or from a distant part of the country. This information could be useful to understanding and responding to the cultural background of the speaker.
Another embodiment concerns a hierarchical, stacked neural network adapted to recognize characters (letters or punctuation marks) in a message. The message could be, for example, a scan of handwriting or typed text, or it could be an image file (JPG, GIF, etc.) or portable document format (PDF) file that is believed to contain text, or that a user wishes to extract text from. In one embodiment, the message comprises both textual and non-textual elements. For example, a page in a children's book might include some text and an illustration. In this case, the non-text image would be ignored by the character recognition processor(s) (unless the image includes a text message). This embodiment provides at least one processor that is adapted or configured to receive a message. There is a first neural network adapted to identify whether the message contains text, and provide an output to a second neural network, comprising an indicia of whether the message comprises text. The second neural network separates the text of the message that it receives from the first neural network into characters (letter or punctuation marks). The second neural network provides an output to a third neural network, comprising an indicia of the characters in the text of the message. If there are parts of the message that are not characters, those are ignored or added to a cognitive noise vector, or processed by a separate neural network or stack of neural networks. Indeed, these vectors may be used to communicate between, and form a basis for cooperation, of the various portions of the system. Thus, if a cognitive noise vector of one network fully corresponds to recognized information by another, and vice versa, then the composite cognitive noise vector for both systems in parallel is minimal. On the other hand, patterns which are not recognized by either network may be presented in a composite noise vector. The third neural network organizes the characters in the text of the message into meaningful strings of characters, such as words, phrases, sentences, paragraphs, etc., and either provides an output or stores an indicia representing the meaningful strings of characters. In one embodiment, each of the first, second, and third neural networks is separately trainable. It is noted that the cognitive noise vector as a standardized object opens the opportunity for outsourcing and software-as-a-service (SAAS) processing of information. Thus, the noise vector may be externally communicated, e.g., over the Internet, to third parties for processing to determine whether it is comprehensible by an existing resource. The result may be a non-arbitrary organization of actions, and this is compatible with an appropriate neural network as a direct input, and/or or as a parallel data stream.
Yet another embodiment concerns a hierarchical, stacked neural network adapted to recognize linguistic structures, such as words, phrases, sentences, etc., in an audio message, such as a voicemail message or a musical recording, preferably of a song including a human voice. In this embodiment, at least one automated processor is configured to receive audio information including a message. A first neural network is adapted to identify whether the audio message contains speech, and to provide an output to a second neural network, comprising an indicia of whether the audio message contains speech. The second neural network separates the sounds of the audio message into phonemes (individual sounds made by a human voice in a spoken language). If the audio message also contains some sounds that are not phonemes, those are filtered out and ignored or represented in a cognitive noise vector. The output of the second neural network is an indicia of the phonemes in the sounds of the audio message, which is provided to a third neural network for further processing. The third neural network organizes the phonemes in the sounds of the audio message into meaningful linguistic structures, such as words, phrases, and sentences. The third neural network either provides as an output or stores an indicia representing the meaningful linguistic structures. In one embodiment, the indicia representing the meaningful linguistic structures are represented as written text. In another embodiment, the indicia representing the meaningful linguistic structures are represented in a language other than that associated with the meaningful linguistic structures, for example, a translation of the spoken words from English to French. If the audio input is music, the cognitive noise vector or extra-neural pathway associated with this set of neural networks may be used, for example, to represent the music and the synchronization of music and semantic content. This information may be used, for example, in karaoke system (present music and textual words, without sung words, to users). The musical elements may also be passed to other stacked neural networks, for appropriate analysis.
In one embodiment, the audio message includes some sounds that are phonemes and some sounds that are not phonemes. For example, a musical recording such as âBack in the U.S.S.R.â by the Beatles includes some phonemes (male human voice) and some sounds that are not phonemes (instrumental music). In this case, the hierarchical, stacked neural network would parse the phonemes to determine the linguistic structures. The non-phoneme part of the sound would either be ignored or added to a cognitive noise vector.
In another embodiment, the audio message includes at least one primary human voice and at least one non-primary (background) human voice. For example, a passenger on a train might leave a voicemail message while the other passengers seated adjacent to her are speaking loudly. In this case, the passenger leaving the voicemail is the primary human voice and the other passengers, who are also uttering phonemes, are the non-primary human voices. In this case, the hierarchical, stacked neural network could be adapted to ignore the non-primary human voices and only focus on the primary human voices in determining the linguistic structures in the message. In a forensic analysis system, the non-primary human voices may also be subject to analysis. The primary and secondary data streams may be represented in separate feature vectors, resulting in the more general exposition of the invention, in which patterns are extracted from the raw data (at each level) using filters, more preferably optimized feature filters (e.g., trained neural networks), with a residual also represented for possible analysis or use. Yet another embodiment involves a method of detecting grammatical errors in a message. The one or more processors implementing this embodiment receive a message having a type. The message could be text created by a word processing program, an email message, a search query, a voice message, an input to a scientific program, etc. The type could be a spoken or written language, a programming language, a manner of encoding chemical or biochemical molecules, etc. An ordered set of words in the message is then detected. These are linked with a set of expected words having semantic attributes. If the message is in a spoken or written language, the set of expected words is preferably a dictionary for the language and the semantic attributes are the meanings associated with the words. The semantic attributes correspond to the proper spelling, grammar, and word use in the spoken or written language. For a computer programming language, the set of expected words could be a set of commands in the language. For a biomolecule encoding, the set of expected words is the set of chemical structures typically found in biomolecules. If the message is an article for a professional audience in a field, the set of expected words might be a trade dictionary, including not only standard English words, but also terms of art in the field. In the next step, the processor(s) detect a set of grammatical structures represented in the message, based on the ordered set of words and the semantic attributes of the corresponding set of expected words. The grammatical structures could be phonemes, morphemes, words, phrases, sentences or paragraphs. The processor(s) then determine whether the set of grammatical structures represented in the message is consistent with the semantic attributes of the expected words (e.g. the grammar of the written language). Errors in spelling, grammar, and word use would also detected in this stage. In one embodiment, some representation of the degree to which the grammatical structures in the message are consistent with the semantic attributes of the expected words is provided as output. The output could state, for example, whether there is a grammatical error or the output could suggest a correction for a grammatical error. The processor(s) may include, for example a single or multiple core processor, and where appropriate a single instruction-multiple data (SIMD) processor system, such as a graphics processor unit (GPU) may be used to process the data, specially where the process comprises a matrix operation which is appropriate for the SIMD architecture present.
An additional embodiment concerns a method of searching a database. The method is implemented on at least one processor, preferably having a memory, an input, and an output. The method of searching includes receiving a search query having a type. The type could be a spoken or written language, a code in a programming language, a biomolecule sequence, etc. The next step is to detect an ordered set of words within the search query. The ordered set of words would be linked to a corresponding set of expected words having semantic attributes. For example, the corresponding set of expected words could be an English or foreign language dictionary. In one embodiment, the set of expected words is a trade dictionary. This embodiment is particularly useful if a trade database (e.g. PubMed for medical doctors or WestLaw for attorneys) is being searched, as professionals searching for information related to their work are likely to use terms of art. The processor would next detect a set of semantic attributes represented in the search query (the meaning of the search query) based on the ordered set of words and their semantic attributes. In the next step, the text of the database is searched for text that has semantic attributes similar or identical to the search query. In one embodiment, the output of the search is either an indication (location in database, copy of text, etc.) of the text in the database comprising semantic attributes identical or similar to the search query or an indication that the search of the database was not successful.
It is therefore understood that the present system and method extends prior techniques by, for example, implementing new methods to achieve useful results, and/or to employ a new processing architecture which exploits both recognized patterns and latent or unrecognized patterns, in a hierarchical stacked network, with at least a portion of the communication between layers comprising non-arbitrary organizations of actions, e.g., information dependent on recognized patterns, which are of a type expected by an adjacent network. By stacking such networks, higher levels of cognition may be achieved. To the extent that each layer corresponds to human cognitive development, automated processes that display human type intelligence and cognition may be implemented. There should be a one-to-one correspondence. By specifically providing pathways for dealing with new or unexpected patterns of data, or interesting noise, the system is able to dynamically respond to its environment, and learn. The learning may be represented by internal modifications of neural networks based on feedback or feedforward signals, or through use of a knowledge base, which, for example, can be processed, in whole or in part, using explicit rules. Indeed, such rules provide the opportunity for human intervention and control over the system.
In order for rules to be universally applicable, it may be preferable for the rule-based network to receive and process the entirety of the data presented to the network, on a global basis and/or at each layer. Therefore, the parallel data pathway may include redundant or inconsistent information with the neural network pathway. Resolution of inconsistencies or ambiguities may be made at higher levels, or may itself represent a component of the system output.
According to another aspect of the technology, the implementation exploits available resources which serve as reservoirs of organized information which represents human intellectual activities. For example, modern Internet search engines, such as Google and Bing analyze human semantic and interactional activities, and store this information with various levels of reduction. Because such human activity represents cognitive performance at levels 8 to 11, and perhaps in specialized situations at higher levels, this stored (and/or processed) information may be used to train and/or implement the neural networks in the system. In addition, the search engines may be directly employed by the intelligent system to provide an adaptive database which itself embodies the results of human intelligence. Therefore, the intelligent system may be implemented to exploit human intelligence at higher cognitive levels, without requiring direct training of the neural networks. Of course, the use of search engine technology provided for other purposes may lead to anomalies, errors and bias, however, in many instances such anomalies, errors and bias are acceptable or addressable through other means. For example, an Internet search engine may be able to assist with disambiguation of a semantic request. A request received linguistically, may include words that have multiple meanings or connotations. In some cases, these meanings vary regionally. Therefore, the location of the request may then be passed to a search engine, which then correlates requests from others on a regional basis, and the results of those requests by others, to infer the meaning intended by the requestor. Likewise, even without a high level analysis, an ordered string of words may be submitted directly to a modern search engine, which then exploits algorithms based on traditional machine intelligence as well as collaborative (i.e., inferentially derived human intelligence) to produce a set of ranked results. These ranked results, in turn, may be returned to the intelligent system, which can then process and act upon the returned information. Because the ranking, at least, of the results displays elements of higher cognitive level analysis due to the human cognitive nature of the source of the ranking algorithm, the ranking may be used as a surrogate for local training of the neural network, as a set of adaptive parameters reflecting intelligence, and/or as a basis for training of the neural network(s), especially at cognitive levels below 12.
Since the Internet databases tend to be freely available, another option is to train a neural network based on a series of queries submitted to an Internet database, or in conjunction with the data maintained by such a database (which itself may be proprietary). The neural network system itself, or a special training facility, may then generate queries, for example as a result of a genetic algorithm, or other means, to provide training examples. The neural network in this case defines regions of its âdecision spaceâ or knowledge base which lack density. The training examples, indeed, may also derive from the search engine. The net result is that the results of human intelligence at reasonably high cognitive levels are exploited to improve the performance of the system.

BRIEF DESCRIPTION OF THE DRAWINGS
 FIG. 1 is a block diagram of the stacked neural network of the present invention.
 FIG. 2 is a block diagram of an embodiment of the stacked neural network of the present invention comprising three architecturally distinct, ordered neural networks.
 FIG. 3 is a block diagram of an embodiment of the stacked neural network of the present invention comprising five architecturally distinct, ordered neural networks.
 FIG. 4 illustrates a computer system that could be used to implement the invention.
 FIG. 5 is a block diagram for another spam detection system based on a neural network in accordance with the present invention.
 FIG. 6 is a flow chart for a detailed embodiment of the present invention, which contains the major processing steps of a spam detection system based on a neural network.
 FIG. 7 is a block diagram of the stacked neural network of the present invention adapted to detect speech.
 FIG. 8 illustrates a flow chart for a grammar checker in accordance with an embodiment of the present invention.
 FIG. 9 illustrates a flow chart of a semantics-based database search method in accordance with an embodiment of the present invention.
 FIG. 10 illustrates a neural network that is adapted to analyze images, according to an embodiment of the invention.
 FIG. 11 is a block diagram for a spam detection system based on a neural network in accordance with the present invention.
 FIG. 12 depicts a decomposition of a function Æ, with dependencies between variables indicated by arrows, according to an embodiment of the invention.
 FIG. 13 shows a recurrent network according to an embodiment of the invention.
 FIG. 14 illustrates a system creating and processing a noise vector in accordance with an embodiment of the invention.

DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT
Before constructing a hierarchical stacked neural network of the present invention, the builder must determine the order of hierarchical complexity of the tasks that the hierarchical stacked neural network will perform. The highest order of hierarchical complexity found from this determination dictates the number of neural networks that the hierarchical stacked neural network requires. In making this determination, the order of hierarchical complexity is measured by the number of recursions that the coordinating actions must perform on a set of primary elements. Actions at a higher order of hierarchical complexity:
1) are defined in terms of the lower-order actions;
2) organize and transform the lower-order actions;
3) produce nonarbitrary organizations of these lower-order actions that solve new, more hierarchically complex tasks.
The following equation determines the order of hierarchical complexity of the task, i.e., the number of concatenation operations it contains. In a concatenation, a coordinating action is performed on two or more of the immediately preceding necessary lower-order actions. The products of this coordinating action then become the lower-order elements of the next higher-order coordinating action. The next higher-order coordinating action is performed again on the new, more hierarchically complex elements generated from the previous order. From this coordinating action one derives the products of the new, higher-order performance of the action, which become prerequisite elements of an action of a still higher order, and that higher-order action is performed again.
The order, O, of hierarchical complexity of task T is denoted O(T), and defined as follows:
(a) For a simple task E1 at the lowest order in the hierarchical complexity, O(E1)=1.
(b) Otherwise, O(E)=O(Eâ²)+1, where O(Eâ²)=max(C(E1, C(E2, . . . C(En))), for all Ei=1 . . . n in E.
In other words, the order of the next higher-order task is one order of hierarchical complexity more than the next lower-order task out of which it is built. If task E is built out of tasks of different orders of hierarchical complexity, then Eâ² has the maximum order of all of the tasks within it. Consider the example of distributivity, 3*(9+2)=(3*9)+(3*2)=27+6=33, where the numbers come from counting objects. The maximum order of the subtasks would be based on the âaddingâ and âmultiplyingâ actions (order 7), not the âcountingâ actions (order 6) (See Table 1 below).
The hierarchical complexity of any task in a task sequence may be determined through such task analysis. The hierarchical complexity of a task therefore refers to the number of concatenation operations it contains. An order-three task has three concatenation operations. A task of order three operates on the output of a task of order two, and a task of order two operates on the output of a task of order one (i.e., a simple task).
Tables 1A, 1B, 1C provide examples of 14 stages/orders of hierarchical complexity identified for human beings through research on human development. It uses in part mathematical operations to illustrate how tasks at a higher stage/order build on tasks at lower stages. Higher-order tasks are created from the preceding lower stage/order tasks by concatenation of lower-order tasks. Other examples, with fewer or more stages/orders of hierarchical complexity, are also available. In the example of spam filtering, there are five neural networks involved. The lowest level neural network N1 identifies text as text. The next highest neural network N2 separates text into letters. The next level N3 organizes text into strings of lettersâwords and/or sentences based on spacing and punctuation. Note that levels N1 through N3 are not necessary if
Referring to FIG. 1, a hierarchical stacked neural network 10 of the present invention comprises a plurality of up to O architecturally distinct, ordered neural networks 20, 22, 24, 26, etc., of which only four (Nm, Nm+1, Nm+2, Nm(Oâ1)) are shown. The number of neural networks in hierarchical stacked neural network 10 is the number of consecutive stages/orders needed to complete the task assigned. A sensory input 60 to stacked neural network 10 enters lowest stage/order neural network 20. The output of each of neural networks 20, 22, 24, 26, etc., is the input for the next neural network in the stack. The highest stage/order neural network 26 in the hierarchical stack produces an output 62. Each of neural networks 20, 22, 24, 26, etc., except for the first in the hierarchical stack, neural network 20, can provide feedback 30, 32, 34, 36, 38, 40 to a lower stage/order neural network 20, 22, 24, etc. This feedback adjusts weights in lower stage/order neural networks. Neural networks in the hierarchical stack 20, 22, 24, 26 . . . can send a request 50 for sensory input 60 to feed more information to neural network 20. A neural network can send this request when its input does not provide enough information for it to determine an output.
Within a neural network in the hierarchical stack, tasks may be combined in ways that do not produce a change in stage/order. For example, iterations may repeat lower stage/order tasks, e.g., repeatedly adding a sequence of numbers. A mixture may include combining simple addition and multiplication. A chain may include arbitrarily linking lower-stage/order tasks that are not conceptually related. In the case of a change in stage/order, a transformation of lower-stage/order operations may use a new construct to combine lower-order tasks that incorporate tasks at a lower stage/order but create a new way of structuring the set of relationships. One example is using matrix algebra so that lower-order operations, e.g., adding and multiplying, become part of the matrix algebra tasks within a multi-dimensional domain.
Referring to FIG. 2, in another embodiment of the present invention, stacked neural network 10 has three architecturally distinct ordered neural networks, 20, 22, and 24. Neural network 20 performs stage/order 5 actions to process sensory input 60. The output from neural network 20 is input to neural network 22, which processes the output from neural network 20 using stage/order 6 actions. The output from neural network 22 is input into neural network 24 that processes the output from neural network 22 using stage/order 7 actions. In this embodiment, neural network 22 does not provide feedback to lower stage/order neural network 20, and neural network 24 does not provide feedback to lower stage/order neural networks 22 and 20. Neural networks 20, 22, 24 do not send requests 50 for additional sensory input 60 to neural network 20.
Referring to FIG. 3, in still another embodiment, stacked neural network 10 contains five neural networks, 20, 22, 24, 26, and 28. Neural network 20 processes sensory input 60 using stage/order 2 actions. The output from neural network 20 is input into neural network 22, which processes the output from neural network 20 using stage/order 3 actions. The output from neural network 22 is input into neural network 24, which processes the output from neural network 22 with stage/order 4 actions. The output from neural network 24 is input into neural network 26, which processes the output from neural network 24 with stage/order 5 actions. The output from neural network 26 is input into neural network 28, which processes the output from neural network 26 with stage/order 6 actions. Neural network 28 is the highest neural network in the hierarchical stack and produces output 62. In this embodiment, neural network 22 sends feedback 30 and neural network 28 sends feedback 40 to neural network 20, which uses them to adjust its weights. Neural network 26 can send a request 50 for sensory input 60 to feed more information to neural network 20 if it is unable to determine its output based on the output from neural network 24.
The stacked hierarchical neural network of the present invention can be constructed only after the number of neural networks needed in the stack has been determined. The stage/order of the actions and tasks performed in a neural network in the hierarchical stack must equal the level of the neural network. Thus neural network Nm performs tasks and actions at stage/order m.
The actions and tasks in each successive neural network are a combination, reordering and transforming the tasks of the immediately preceding neural network in the hierarchical stack. At each level the neural network performs actions at a higher stage/order of human cognitive development. Thus a neural network at the lowest level may only process binary information, such as whether or not an event has occurred, where a neural network operating at a higher level in the hierarchical stack may perform actions in multiple dimensions. As in human cognitive development, the neural network at the higher level makes more complex discriminations and can perform more sophisticated tasks. For example, a neural network at level 6 can perform tasks such as counting objects, where a neural network at level 7 can perform tasks that involve simple mathematical operators. Thus level 7 has moved beyond counting to a system that creates counts through a new, higher-order set of tasks (See Table 1 above).
Each neural network in the hierarchical stack can have one or more hidden layers of neurons and various interconnections. The number of hidden layers within a network and the interconnections between layers depend on the nature of the tasks that the neural network at that particular stage/order is performing. The number of tasks and types of actions that the neural network performs and the stimuli that it processes all affect the number of hidden layers, the number of neurons in a hidden layer, and the interconnections between layers. The stimuli processed by the neural network may be external, internal to the network, or previously conditioned stimuli. When the types of stimuli that the neural network processes increase, the number of hidden layers and/or the number of neurons within a layer increase.
The algorithms a particular neural network in a hierarchical stack uses to assign connection weights between neurons also vary, depending on the nature of the problem that the neural network is solving and the input and internal stimuli that the neural network processes. Specific algorithms are not associated with particular stages/orders of neural networks in the hierarchical stack. For example, a type of algorithm that assigns connection weights in a neural network at stage/order m that names geometric objects may differ from an algorithm that assigns connection weights in a neural network at stage/order m that names people.
Training is not specific to the stage/order of a neural network in a hierarchical stack. Rather it can vary based on the particular tasks being performed by a network in the hierarchical stack. Individual networks in the hierarchical stack may use unsupervised training, supervised training, or a combination of both to set initial weights. In the case of unsupervised training the neural network continues to learn, adapt, and alter its actions throughout the course of its operation. It can respond to new patterns not presented during the initial training and assignment of weights. This capacity allows a network to learn from new external stimuli in a manner similar to how learning takes place in the real world.
A neural network in the hierarchical stack can train other neural networks that operate at the same order/stage of hierarchical complexity. In this training, the information from the neural network is transferred to an architecturally distinct unit that is analogous in structure to the original neural network. This type of training constitutes a transfer of learning from one neural network to another; the new neural network does not have to be independently trained, thereby saving time and resources.
More formally stated, an intelligent control system of the present invention comprises up to O hierarchical stacked neural networks, Nm, . . . , Nm+(Oâ1), where m equals the lowest stage/order tasks performed by the hierarchical stacked neural network and O represent the highest stage/order tasks performed, The actions and tasks performed in Nm correspond to the stage/order of cognitive development of the model of cognitive development employed in solving the problem. Thus N1 performs tasks at the level of hierarchical complexity that corresponds to stage/order 1, and N5 processes information and responds at the level of complexity that corresponds to stage/order 5. The number of neural networks in the stack depends on the order of hierarchical complexity of the tasks performed by the hierarchical stacked neural network. The number of networks always equals the highest order of hierarchical complexity of any task performed by the hierarchical stacked neural network. But, unlike the human brain, the number of networks in a hierarchical stack is not limited by the highest order of hierarchical complexity that a human can achieve. The number of networks in a hierarchical stack is unlimited and thus may exceed the capabilities of the human brain.
Referring again to FIG. 3, a stacked neural network of the present invention can begin at any stage/order of cognitive development and end at any stage/order, but information must be processed by each stage/order in sequence and ascending order. An intermediate stage/order cannot be skipped. For example, if a stacked neural network begins at N3 and ends at N6, information is first processed by N3 and then output to N4. N4 then processes the information and outputs it to N5. N5 processes the information and outputs it to N6, which produces the final output of the stacked neural network.
The stage/order at which a stacked neural network begins and ends and the number of neural networks in a hierarchical stack depend on the nature of the problem to be solved. Moreover, each neural network in a hierarchical stack may use different architectures, algorithms, and training methods. The type of architecture, algorithm, and training method selected for a particular neural network in the hierarchical stack depends on the order/stage of the neural network, the type of intelligent control system that is being implemented, the tasks to be performed and the stimuli to be processed. In addition to producing data as output, the neural networks described herein can be designed to provide error vectors depicting the cognitive noise produced at each neural level. Cognitive noise occurs when the information is of a form which is recognized at a lower level (and is thus presented at the input of the higher level), but it fails to represent a recognized pattern at a higher level. For example, if a text includes valid English characters, but there are many misspelled words or non-words, or alternatively if the words are correctly spelled but not combined into valid phrases and sentences. In another example, in an algebraic system, cognitive noise occurs when lower level calculations (e.g. addition) are done correctly, but higher level calculations (e.g. multiplication or distribution) are systematically done incorrectly. An example of the use of this cognitive noise is to maintain the representations of these presumptively erroneous calculations which might indeed, at a higher level, represent useful information, using a different calculus or symbology, or through a transformation of the data or symbols to a different representation. In the human brain, cognitive noise might be suppressed, as the brain is tuned to search selectively for certain signals. This allows us to concentrate on a conversation with a colleague in a noisy room (the background noise is cognitive noise) or read sloppily handwritten text (the imperfections in the formations of the letters are cognitive noise). See, generally, Selective attention and the suppression of cognitive noise. Neill, W. Trammell; Westberry, Richard L. Journal of Experimental Psychology: Learning, Memory, and Cognition. Vol. 13(2), April 1987, 327-334), describing this effect. However, in some situations the cognitive noise that is filtered out might comprise valuable information in itself. For example, the fact that a meeting is taking place at a noisy bar instead of in a quiet office might provide some information as to the intent of the parties. Similarly, the fact that a document is handwritten rather than typed might give one information as to the intent of the author. Similarly, in spam filtering, the fact that a message is not written in proper English increases the likelihood that it is spam.
It is not necessary, for the present invention, for the neural network, especially at each level of analysis, to fully understand the meaning of each word or sentence that it identifies. (The output could only be a spam flag or a non-spam flag.) Rather, clustering techniques may be used to separate data into coherent signals and cognitive noise at each neural level.
In one embodiment of the invention, k-means clustering is used to separate signal, cognitive noise and pure noise. The steps of k-means clustering, as applied to word identification are:
1. Select a number of clustersâone cluster for each word.
2. Determine the cluster centers, which represent the correct spelling of each word.
3. Assign each word in the input text to the nearest cluster center. The noise is the distance of each word in the input text from the nearest cluster center. Ideally, the distance would be some measure of how correct the spelling is. In other words, if the target word âhelloâ is spelled H-E-L-L-O, it would correspond to a distance of zero, but the spelling H-E-L-O would be closer than G O O D D B Y, which would correspond to âgoodbye.â
4. Calculate the total distance between the target words and the closest match. Messages with a larger distance are more likely to be spam. In one embodiment, this is reported in an error vector.
A similar algorithm can be used in other neural networks, for example, for character identification.
K-means clustering is more difficult to apply to sentence structure identification because there is not a fixed number of clusters with which the sentence can be compared. There are a finite number of words in the dictionary, but it is nearly impossible to provide a list of all of the possible, grammatically correct, sentences with all of these words, and such clustering would present its own problems and might not simplify the problem at hand. Fuzzy c-means clustering can be used in this case. In fuzzy clustering, each point has a degree of belonging to a cluster rather than fully belonging to a cluster. This might correspond to the role a word plays in a sentence. For example, the word âXerox,â might be a proper noun (Xerox Corporation), a common noun (photocopy machine) or a verb (to photocopy). The sentence structure parser would consider all three possibilities and probabilistically determine which one is most likely based on the other words in the phrase or sentence and their roles therein. For every point x in a fuzzy c-means clustering algorithm, we have a coefficient giving the degree of belonging in the kth cluster uk(x). Usually, the sum of those coefficients for any given x is defined to be 1.




â


x
â¡

(



â

k
=
1


num
.

 

â¢
clusters


â¢


u
k

â¡

(
x
)



=
1

)


.





Note that, in one embodiment, one of the clusters would correspond to cognitive noiseâgroups of words that do not make sense together or do not represent a proper English (or foreign language) phrase or sentence. Note that it is also possible that a spoken representation might be a slurred rendition of âthe rocksâ. The clustering algorithm might also consider that possibility.
With fuzzy c-means, the centroid of a cluster is the mean of all points, weighted by their degree of belonging to the cluster:






center
k

=



â
x

â¢




u
k

â¡

(
x
)


m

â¢
x




â
x

â¢



u
k

â¡

(
x
)


m




,




The degree of belonging is related to the inverse of the distance to the cluster center:







u
k

â¡

(
x
)


=

1

d
â¡

(


center
k

,
x

)




,




then the coefficients are normalized and fuzzyfied with a real parameter m>1 so that their sum is 1. So






u
k

â¡

(
x
)


=


1


â
j

â¢


(


d
â¡

(


center
k

,
x

)



d
â¡

(


center
j

,
x

)



)


2
/

(

m
-
1

)





.





After this procedure, either the coefficient corresponding to the noise cluster or some measure of the distance of the points from the respective center points is returned to signify the degree of noise in this level.
Spam Filter
An example of an intelligent system based on the stacked neural network of the present invention is a spam filter. This example follows the model of cognitive development depicted in Table 1. (See R. Case (1987), supra; M. L. Commons et al (1998), supra; M. L. Commons & P. M. Miller (1998), supra.)
An Intelligent Control Spam Filter and Character Recognizer
Referring to FIG. 11, a spam filter 100 comprises a hierarchical stack of five architecturally distinct neural networks 110, 112, 114, 116, and 118. Each neural network 110, 112, 114, 116 and 118 performs processing actions associated with a stage/order from the model described in Table 1. The input to the spam filter is an email message 120. If the message is determined to be spam, the output is a spam flag 122. If the message is determined to be clean, the output is a clean flag 124. The first neural network in the hierarchical stack, neural network 110 is a feed-forward neural network that performs processing actions at stage/order 1, the Sensory and Motor stage/order, of the model depicted in Table 1. At this stage/order, an intelligent system can detect whether certain computer data represents text, but not necessarily the meaning or identity of the text. The text could either be in ASCII or a similar format that is stored as character on the computer, or it might be an image (e.g. JPG, GIF or similar format) containing a photograph or scan of typed text or handwriting. Using Sensory and Motor tasks, neural network 110 detects the parts of email message 120 that include characters that are intended for the recipient to read. An output response to neural network 112 is triggered when threshold levels of excitation in contiguous neurons constitute a large enough area of excitation to make it highly probable that a new set of characters has been read. Vectors containing the inputted characters are output to neural network 112. Neural network 110 is trained, for example, using input arrays containing either ASCII characters or image (JPG or similar) files containing characters. With either input, the neural network 110 learns to identify the characters. A backward-propagation algorithm 140 adjusts neural network's 110 weights based on the networks successes and failures in identifying text. In one embodiment, neural network 110 includes 256 individual networks, each adapted to detect a certain character, i.e. one neural network to detect âaâ, another to detect âbâ, etc. Conflicts between characters that appear similar to one another, e.g. âgâ and âqâ or T and âtâ, might be resolved at the next level in neural network 112, with both possibilities submitted for consideration. Neural network 112 is an adaptive-resonance (ART) neural network (G. A. Carpenter & S. Grossberg, âNeural dynamics of category learning and recognition: Structural invariants, reinforcement, and evoked potentialsâ, in M. L. Commons, R. J. Hermstein, S. M. Kosslyn, & D. B. Mumford, (Eds.), 9 Computational and clinical approaches to pattern recognition and concept formation. Quantitative analyses of behavior (Hillsdale, N.J., Lawrence Erlbaum Associates, 1990)). Neural network 112 performs processing actions at stage/order 2, the Circular Sensory-Motor stage/order, in the model described in Table 1. At this stage/order an intelligent system can distinguish objects, such as letters. Using Circular Sensory-Motor stage/order tasks, neural network 112 maps input excitation patterns from neural network 110 to letters, which are now stored in ASCII or similar form. A backward-propagation algorithm 142 adjusts neural network's 112 weights based on the networks successes and failures in accurately separating text into letters. Neural network 114 is a feed-forward heteroassociative neural network that performs processing actions at stage/order 3, the Sensory-Motor stage/order, of the model described in Table 1. At this stage an intelligent system can recognize the ASCII characters and interpret them into strings of letters. Using Sensory-Motor tasks, neural network 114 analyzes patterns output by neural network 112 and determines logical stopping places for strings of text, such as spaces, punctuation marks, or ends of lines. Neural network 114 is trained by inputting patterns of words and sentences that it needs to identify. When neural network 114 associates a pattern with a word or a sentence, the network outputs to neural network 116 and 118 the pattern's classification as a word or a sentence, as well as the position in the text as a whole of the word or the sentence. A backward-propagation algorithm 144 adjusts neural network's 114 weights based on the networks successes and failures in accurately separating letters into words. Neural network 116 is a feed-forward neural network that performs processing actions at stage/order 4, the Nominal stage/order, of the model described in Table 1. At the Nominal stage/order, an intelligent system can identify simple relationships between concepts and label them. The neurons in neural network 116 receive excitatory and inhibitory input based on the text that was received from neural network 114. These neurons determine the meaning, validity, and correct spelling of individual words in the text. There might be cognitive noise in the form of misspelled words or the use of non-words. While customary neural networks have typically ignored this cognitive noise, the instant embodiment provides a noise vector comprising a representation of the noise and the probability that it was generated randomly, based on common typing and spelling errors. The determination that a word has been misspelled or a non-word has been used is done by comparing the word with patterns for existing English language or foreign language words that can be obtained from an electronic dictionary. When a word does not perfectly match a word in the dictionary, a measure of the degree of difference between the word in the email and the word in the dictionary is calculated and represented in a cognitive noise vector 162. Neural network 116 then outputs to neural network 118 an array pattern for the words in the text for further processing by neural network 118. After neural network 116 completes processing the text, the cognitive noise vector 162 is inputted to a decision logic 166. The decision logic 166 decides whether the cognitive noise vector 162 exceeds a threshold. If the cognitive noise vector 162 exceeds the threshold, it is concluded that the message is likely to be spam because there were many misspelled words and non-words in the message. A spam flag 122 is therefore provided as the output of the process 100. This might save time and computational resources as it does not require the use of neural network 118, which might be slower than the other neural networks since it is the most complex.
Neural network 116 is trained using patterns of characters that it must convert into words. A backward-propagation algorithm 146 adjusts weights each time neural network 116 successfully matches a word with an existing word in the dictionary or identifies a misspelled word or non-word.
Neural network 118 is an adaptive-resonance (ART) neural network that performs processing actions at stage/order 5, the Sentential stage/order, of the model described in Table 1. At this stage/order, classes and patterns are ordered. Using Sentential stage/order tasks, neural network 118 tracks words and characters and determines when it is likely that a sentence is starting and ending, whether there are errors in sentence structure or grammar, and whether the provided combinations of words make sense. This neural network attempts to form meaningful sentences and phrases based on the words and the punctuation marks in the ASCII text of the email message and the words detected by neural network 116. The input to this neural network is the string of letters from neural network 114 and the output from the word detector 116. Neural network 118 produces as an output a representation of the sentences and phrases in the email message 120 and a cognitive noise vector 164 representing the grammatical errors and the incomprehensible combinations of words in the message. The cognitive noise vector 164 also takes into account the severity of the error. For example, a missing comma would be weighed less than a sentence lacking a verb. The cognitive noise vector 164 is provided as input to a decision logic 168 that determines whether the amount of cognitive noise exceeds a threshold. If the cognitive noise level is above the threshold, then it is concluded that the message is likely spam because it exhibits poor sentence structure and meaningless groupings of words. Therefore, a spam flag 122 is raised. Otherwise, it is concluded that the message is sufficiently meaningful to be from a business or social colleague of the email user and a clean flag 124 is raised. Neural network 118 is trained using patterns words and characters that are likely to represent phrases or sentences. A backward-propagation algorithm 176 adjusts weights in each of the neural networks 110, 112, 114, 116, and 118 based on the hierarchical stacked neural network's success in detecting words, sentences, and errors in spelling and sentence structure. In addition, there is a backward-propagation algorithm 176, which propagates from neural network 118 back to neural network 110, allowing all five neural networks 110, 112, 114, 116, and 118 to adjust their weights based on errors in classification that are discovered not immediately but rather in later processing. (E.g., an error of text identification by neural network 110 is discovered while organizing text into sentences at neural network 118. This error is communicated and adjusted for through backward-propagation algorithm 176.) Backward propagation algorithms 174, 172, and 170 operate in a similar manner for errors by neural networks 112, 114, and 116 that are discovered in the neural network 118 level.
An Intelligent Control Spam Filter.
 FIG. 5 illustrates another embodiment. In this embodiment, a spam filter 200 includes only two neural networks 116 and 118. Note that these are similar to the highest two networks from FIG. 11. This is because the illustrated embodiment requires that the input email message 120 be comprised only of ASCII text or of images or attachments that were pre-converted to ASCII text. Any input that is not text is ignored. If the processor implementing this embodiment determines that the message is spam, a spam flag 122 is outputted. Otherwise, the output is a clean flag 124.
Neural network 116 operates identically to neural network 116 in FIG. 11, except that there is no feedback to neural networks 110, 112, and 114, as these networks are no longer involved in parsing the text. Indeed, a general proposition is that an appropriate input may be provided to any level of the network, and thus ordered processing is not strictly required. This permits alternate entry points and parallel processing algorithms. The neural network attempts to detect and determine the meaning, validity, and correct spelling of individual words in the text. If there are misspelled words or non-words in the text (as compared to an electronic dictionary), these words are treated as cognitive noise and the value of the cognitive noise vector 162 is increased. At the end of the processing, an output comprising the words and their meanings is provided to the next neural network 118 for parsing into phrases and sentences and a cognitive noise vector 162 is generated. The cognitive noise vector 162 is analyzed by a decision logic 166, which determines whether the amount of cognitive noise exceeds a threshold. If not, then processing is continued at the next neural network 118.
If the decision logic 166 concludes that the cognitive noise exceeds a threshold, then it is concluded that the message contains many spelling error and non-word and it is therefore likely to be spam. Thus, a spam flag 122 is raised. Neural network 118 also operates in a manner similar to neural network 118 in FIG. 11. This neural network attempts to form meaningful sentences and phrases based on the words and the punctuation marks in the ASCII text of the email message and the words detected by neural network 116. Clustering techniques may be used in the neural network to associate sets of letters into word and associate sets of words into sentences. Data that cannot be placed or clustered into a word or sentence is added to the cognitive noise vector. The input to this neural network is the string of letters from neural network 114 and the output from the word detector 116. Neural network 118 produces as output a representation of the sentences and phrases in the email message and a cognitive noise vector 164 representing the grammatical errors and the incomprehensible combinations of words in the message. The cognitive noise vector 164 is provided as input to a decision logic 168 that determines whether the amount of cognitive noise exceeds a threshold. If the cognitive noise level is above the threshold, then it is concluded that the message is likely spam because it exhibits poor sentence structure and meaningless groupings of words. Therefore, a spam flag 122 is raised. Otherwise, it is concluded that the message is sufficiently meaningful to be from a business or social colleague of the email user and a clean flag 124 is raised.
Process of Spam Filtering
 FIG. 6 illustrates a third embodimentâa process 300 of spam filtering. An email message 310 in ASCII or similar text format is fed to a fourth level (of Table 1) neural network 320 that identifies words in the email and a fifth level neural network 330 that identifies sentences and phrases in the email. The word-identifying neural network produces, in addition to its ordinary output comprising words 321, a cognitive noise vector 322 measuring the degree of spelling errors and the existence of non-words in the email. Clustering techniques are used to cluster letters into words. After the letters are clustered into words, the spelling can be determined by comparing the spelled word to a dictionary. Grammatical errors can be discovered by feeding the sentence into a meaning generator. Errors in spelling and grammar are considered cognitive noise because they comprise information but are completely irrelevant to determining the meaning of the message. Therefore, they are added to a cognitive noise vector. The cognitive noise vector is provided to a decision logic 324 that decides whether the cognitive noise vector exceeds a threshold. If the cognitive noise vector exceeds a threshold, it is concluded that the message is likely spam because there are many non-words and spelling mistakes. Thus, spam flag 350 is raised.
Neural network 330 takes as input the text of the email message 310 and the word structures 321 generated by neural network 320 for identifying words. The neural network then proceeds to identify sentences and phrases in the text, for example by fuzzy clustering as described above, an output representing the sentences and phrases 331 and a cognitive noise vector 332 are generated. The cognitive noise vector 332 is then provided as input to a decision logic 334, which decides whether the cognitive noise vector exceeds a threshold. If the cognitive noise is below a threshold than the logic concludes that the email message is likely written by a business or social contact of the email account holder. Therefore, the email message is decided to be clean and a clean flag 340 is raised. Otherwise, it is concluded that the message is probably spam because there is an excess of grammatical errors or incomprehensible language. Therefore, a spam flag 350 is raised.
Another type of spam is commercially oriented, but grammatically correct and cognitively comprehensible. In that case, a higher level analysis may be used to detect a âpurposeâ of the communication. In many cases, business correspondence is commercially oriented, so a spam classification cannot be made simply on the basis of the commercial nature. In this case, classic methods of spam filtering may be applied, such as white list, blacklist, and flag words. However, that alone does not address the issue of spoofing of email addresses, or whitelist contacts sending undesired communications. In that case, a network may be trained for a user's cognitive areas of interest, and produce a cognitive noise vector representing a degree to which a communication is outside the areas of interest.
The area of interest can of a group of communications, e.g. from a particular sender, can be ascertained by a clustering of the meanings of the communications and the grammar and language used. For example, an email sent by a business colleague usually is written in formal English and contains terms of art relevant to the author's profession. Such messages would thus be clustered as unlikely spam. However, if the business colleague in the example sends a letter written in poor English saying that his cousin is a princess in Nigeria who needs money, it would likely be flagged as spam because the topic, grammar, and word choice are completely different from those usually used by the business colleague.
 FIG. 14 illustrates the creation and use of a noise vector 1460 according to an embodiment of the invention.
Message 1410 is received at a message processor, such as an email address. Readers will note that the message has correctly formed letters and correctly spelled words, but not correctly formed sentences.
The level 4 neural network 1420 notices that there are English letters that make sense in the message. The level 5 neural network 1430 notices that there are English words that make sense in the message.
However, in the level 6 neural network 1440, it is noted that the sentences in the message do not make sense. This error 1450 is provided as output. In addition, a noise vector 1460 is created to note this inconsistency between sensible words and insensible sentences. In one embodiment, this noise vector is submitted for further processing and analysis. In one embodiment (not illustrated) this further processing and analysis takes place at a neural network level that is not one level above the level that produced the noise vector. For example, in the illustrated case, the noise vector was generated in N6 and the processing could take place in N8 or N9.
Speech Recognizer
Referring to FIG. 7, a speech recognizer 700 comprises a hierarchical stack of three architecturally distinct neural networks 720, 730, and 740. Each neural network 720, 730, and 740 performs processing actions associated with a stage/order from the model described in Table 1. The input to the speech recognizer is a voice message 710. The output is indicia representing the meaningful linguistic structures 750 in the speech. In one embodiment, the indicia representing the meaningful linguistic structures are a conversion of the structures to text (voice to text). In another embodiment, the indicia representing the meaningful linguistic structures are in a language different from that associated with the original voice message (translation). The first neural network in the hierarchical stack, neural network 720 is a feed-forward neural network that performs processing actions at stage/order 1, the Sensory and Motor stage/order, of the model depicted in Table 1. At this stage/order, an intelligent system can detect whether certain computer data represents speech, but not necessarily the meaning or identity of the speech. The speech could be any audio file. In one embodiment, the speech is a voicemail message. In another embodiment, the speech is a musical recording. The musical recording might contain parts that are not speech (e.g. instrumental music). In this case, the processor would either ignore the parts that are not speech or place the parts that are not speech into a cognitive noise vector because these parts comprise information that is irrelevant to ascertaining the meaning of the speech. The voicemail message might have some background noise that is not in the primary voice(s) of the message. For example, a passenger leaving a message in a crowded train might have some background noise coming from the other passengers, who are conversing among themselves. One embodiment can be adapted to either ignore the speech that is not associated with the primary voice(s) or to add this speech to a cognitive noise vector. In either case, in one embodiment, clustering techniques are used to separate the primary voice in the message from the instrumental music and/or background noise.
Using Sensory and Motor tasks, neural network 720 detects the parts of voice message 710 that include phonemes (individual sounds by a human voice that make up speech) that are intended for the recipient to hear and understand. An output response to neural network 720 is triggered when threshold levels of excitation in contiguous neurons constitute a large enough area of excitation to make it highly probable that a new set of phonemes has been read. Vectors containing the inputted phonemes are the output of neural network 720 and are provided as input to the next level of processing, neural network 730. Neural network 720 is trained using input arrays containing voice recording comprising speech. Parts of the training set could include noise, either from other speakers, musical instruments, or white noise in the background. With either input, the neural network 720 should learn to identify the speech as such. A backward-propagation algorithm 722 adjusts neural network 720's weights based on the networks successes and failures in identifying text.
Neural network 730 is an adaptive-resonance (ART) neural network. Neural network 730 performs processing actions at stage/order 2, the Circular Sensory-Motor stage/order, in the model described in Table 1. At this stage/order an intelligent system can distinguish objects, such as phonemes. Using Circular Sensory-Motor stage/order tasks, neural network 730 maps input excitation patterns from neural network 720 to phonemes, which are now stored in memory provided as output. A backward-propagation algorithm 732 adjusts neural network 730's weights based on the networks successes and failures in accurately separating speech into phonemes. If there are two phonemes that have a very similar sound, for example âLâ and âRâ or âDâ and âTâ in the English language, in one embodiment of the invention, both possibilities are submitted to the next level, neural network 740, for processing. Errors in this identification are submitted back to neural network 730 through backward-feedback loop 746 for further training of neural network 730.
Neural network 740 is a feed-forward heteroassociative neural network that performs processing actions at stage/order 3, the Sensory-Motor stage/order, of the model described in Table 1. At this stage an intelligent system can recognize the phonemes and interpret them into meaningful linguistic structures, such as words, phrases or sentences. Using Sensory-Motor tasks, neural network 740 analyzes patterns output by neural network 730 and determines the logical beginnings and endings of the linguistic structures in the speech.
Neural network 740 is trained by inputting patterns of phonemes that it needs to parse and identify. When neural network 740 associates a pattern with a linguistic structure, such as a word or a sentence, the network adds a representation of the linguistic structure (for example, in text form or as a translation to a different language) to its output. A backward-propagation algorithm 742 adjusts neural network 740's weights based on the networks successes and failures in parsing and identifying patterns of phonemes. In addition, there is a backward-propagation algorithm 744, which propagates from neural network 740 back to neural network 720, allowing all three neural networks 720, 730, and 740 to adjust their weights based on errors in classification that are discovered not immediately but rather in later processing. (E.g., an error of speech classification by neural network 720 is discovered while organizing speech into linguistic structures at neural network 740. This error is communicated and adjusted for through backward-propagation algorithm 744.) Backward propagation algorithm 746 operates in a similar manner for errors by neural network 730 that are discovered in the neural network 740 level.
Grammar Checker
 FIG. 8 illustrates a flow chart for the steps taken by a grammar checker 500 in accordance with an embodiment of this invention. The grammar checker 500 could be implemented on one or more special purpose or general purpose processors. Preferably, the one or more processors implementing an embodiment of the invention will have a memory, an input, and an output.
In step 510, the grammar checker receives a message having a type. The type of the message could correspond to a spoken or written language, such as English or French. Alternatively, the type might be a computer program written in a programming language or a representation of a biomolecule adapted to be inputted in a computer program. Persons skilled in the art will recognize many different types of messages for which this invention would be useful. For example, the message could be a text created by a word processing program, an email message, a search query, a voice message, or an input to a scientific program.
In step 520, the processor implementing the invention detects an ordered set of words in the message.
In step 530, the ordered set of words in the message is linked with a dictionary. In another embodiment (not illustrated) the dictionary could be replaced with any set of expected words that has semantic attributes. For example, while a dictionary might be useful for analyzing English text in a high school term paper discussing a Shakespeare play, a listing of amino acids might be more useful in analyzing a structure of a protein for typographical and syntactical errors. In one embodiment, the dictionary is a trade dictionary, including terms of art used in a particular trade, in addition to common English words. This is advantageous if the message is a scholarly article in a field such as biology, chemistry, or medicine, where terms of art are often used.
In step 540, the processor detects grammatical structures represented in the message, based on the dictionary. In addition to analyzing parts of speech, the processor takes the meaning of the words into account. In one embodiment, a neural network that is trained on a training set of a large amount of text of the type of the message is used in this step. The advantage of using such a neural network is that the neural network can be trained to understand and detect the subtle distinctions in language, which are difficult to program into a prior art rule-based grammar detection system.
In step 550, the processor determines whether the grammatical structures represented in the message are consistent with the semantic attributes of the words in the dictionary. The processor would take into account the meaning of the word and the context in which it is being used to determine if the grammar is correct. In one embodiment, where the message is in a spoken or written language, the semantic attributes correspond to proper spelling, grammar, and word use in the language.
In step 560, the processor stores or outputs a representation of the degree to which the grammatical structures in the message are consistent with the semantic attributes of the expected words, according to the dictionary. These can be determined by referencing the meaning of the words, as well as the appropriate sentence structure in the language of the work (e.g. English, French, and similar languages have a well-defined expected sentence structure). In one embodiment, the processor outputs whether there is at least one grammatical error in the message. In another embodiment, the processor suggests a correction for at least one grammatical error in the message. The cognitive noise, or structured data that is irrelevant to understanding the meaning of the text, such as errors in spelling and grammar, are added to a cognitive noise vector for further processing.
In addition to detecting existing grammatical structures, the processor also notices errors in spelling, grammar, and word use.
Semantics-Based Search
 FIG. 9 is a flowchart for a semantics-based search 600 of a database. The search is implemented by at least one processor. Preferably, the at least one processor implementing the search has a memory, an input, and an output.
In step 610, the processor receives a search query having a type. The type of the message could correspond to a spoken or written language, such as English or French. Alternatively, the type might be a computer program written in a programming language or a representation of a biomolecule adapted to be inputted in a computer program. Preferably, the type of the input for the search query will be the same type as some of the data in the database. For example, if the database is a database of biomolecules, the search query will be a biomolecule structure. However, this is not a requirement of the invention. The type may be explicitly identified, implied, or determined by the system through analysis of the data or its context.
In step 620, the processor detects an ordered set of words in the search query.
In step 630, the set of words found within the search query is linked to a dictionary. In another embodiment (not illustrated) the dictionary could be replaced with any set of expected words that has semantic attributes. For example, while a dictionary might be useful for analyzing an Internet search for âpizza recipeâ in the English language on a general internet search service, such as Google or Bing, a listing of amino acids might be more useful in analyzing a search in a database of known protein structures. In one embodiment, the dictionary is a trade dictionary, including terms of art used in a particular trade, in addition to common English words. This is advantageous if the search is being conducted in a trade database, such as PubMed for medical doctors or WestLaw for attorneys. Errors in spelling and grammar, as well as information about the language or type of code in which the user input is provided, are added to a cognitive noise vector for further processing. The spelling and grammar errors, as well as the language or code in which the user entered the query could be useful, for example, in ascertaining the user's background.
In step 640, the semantic attributes or the meaning of the search query is detected, based on the dictionary. In one embodiment of the invention, the semantic attributes correspond to the meaning of the word. In another embodiment, where the search query is in a spoken or written language, the semantic attributes correspond to proper spelling, grammar, and word use in the language.
In step 650, the processor searches for text in the database comprising semantic attributes or meaning identical to those of the search query. This could be useful in an Internet search for content that has identical meaning to the input. For example, a traditional Internet search for âpuppyâ would not provide, as a result, an article titled âYoung Dog,â even though such an article might be highly relevant. The semantics-based search presented here solves this problem of the prior art. In another embodiment, results in a foreign language, which have the same meaning as the search query, might be provided. For example, a French article titled âBonjour les Amisâ (âHello Friendsâ) might be highly relevant to a search for âhello friends,â entered in English, but it would not be provided in response to a traditional internet search for these English words.
In step 660, an output is provided. In one embodiment, the output is an indication of the text in the database comprising semantic attributes identical to those of the search query or an indication that the search was not successful. The indication of the text could be a copy of the text, a link to the text, or a web or directory address of the text.
Image Analyzer
Another embodiment of the invention involves an image analyzer to detect patterns in images that correspond to objects or concepts. The image detector is useful in many situations. For example, a camera-based system that detects shoplifting or other criminal activity needs to be able to identify items in an image as people, objects sold by the store, weapons, etc. In one embodiment, the images provided as input to the image detector are photographs (stored as JPG, GIF, or other extensions), videos (stored as MPEG or other extensions) or computer-generated images or videos.
 FIG. 10 illustrates a neural network that is adapted to analyze images. The input to the neural network comes from one or more cameras or video cameras. In one embodiment, the input is generated by a 2D or 3D camera or video camera. In another embodiment, the input is from an image or video created by computer. The first neural network in the hierarchical stack, neural network 1010 is a feed-forward neural network that performs processing actions at stage/order 1, the Sensory and Motor stage/order, of the model depicted in Tables 1 and 2A-2C. At this stage/order, an intelligent system can detect whether an object is present or not. In one embodiment, this detection is done by looking for patterns of change in light intensity or color that indicate different objects or different parts of objects. Using Sensory and Motor tasks, neural network 1010 detects a change in light intensity 1020 that reaches a threshold consistent with the existence of an object in the image. Neural network 1010 has a hidden layer of neurons that receive inhibitory and excitatory input from the delta values and from a series of âcompetitive neighborâ neurons in the hidden layer that are within a predetermined range of the neurons receiving delta input. An output response to neural network 1012 is triggered when threshold levels of excitation in contiguous neurons constitute a large enough area of excitation to make it highly probable that a new object has been located. Data containing the excitation area's centroid, dimensions and coordinates are output to neural network 1012. Cognitive noise, or any information that is irrelevant or only marginally relevant to detecting an object of interest, is added to a cognitive noise vector 1011, which is then provided for processing to a neural network level 1014, which is higher than the level to which the output of neural network 1010 is provided.
Neural network 1010 is trained using input arrays containing excitation patterns. A backward-propagation algorithm 1030 adjusts weights in neural network 1010 based on neural network 1010's successes and failures in detecting physical objects.
Neural network 1012 is an adaptive-resonance (ART) neural network (G. A. Carpenter & S. Grossberg, âNeural dynamics of category learning and recognition: Structural invariants, reinforcement, and evoked potentialsâ, in M. L. Commons, R. J. Hermstein, S. M. Kosslyn, & D. B. Mumford, (Eds.), 9 Computational and clinical approaches to pattern recognition and concept formation. Quantitative analyses of behavior (Hillsdale, N.J., Lawrence Erlbaum Associates, 1990)). Neural network 1012 performs processing actions at stage/order 2, the Circular Sensory-Motor stage/order, in the model described in Table 1. At this stage/order an intelligent system distinguishes objects and identifies individual objects as objects having a type. Using Circular Sensory-Motor stage/order tasks, neural network 1012 maps input excitation patterns from neural network 1010 to clusters. Cluster weights are adjusted each time a new excitation pattern enters neural network 1012 from neural network 1010. A second hidden layer of neurons tracks excitation patterns through the scene and links their movement centroids to the appropriate clusters. Repeated placement of input excitation patterns on the same cluster, when only the centroid coordinates of the patterns differ, triggers an output signal to neural network 1014 when a predetermined threshold rate of continuous placement is obtained. The output signal contains the excitation area's centroid, dimensions, store coordinates, and history of centroid positions at successive time intervals to suggest that an object might be moving. The training of neural network 1012 is unsupervised. Cluster weights are adjusted each time a new excitation pattern, representing a new physical object is input into neural network 1012 from neural network 1010.
Neural network 1014 is a feed-forward heteroassociative neural network that performs processing actions at stage/order 3, the Sensory-Motor stage/order, of the model described in Table 1. At this stage an intelligent system can recognize objects and place them in classes. Using Sensory-Motor tasks, neural network 1014 analyzes patterns output by neural network 1012 and labels objects in accordance with their type. Persons skilled in the art will recognize many possible types that objects can have. For example, in a vision system adapted for an autopilot for a motor vehicle, a type for an object might be âanother vehicleâ, âpedestrianâ, âroad signâ, and âtraffic control deviceâ. In a system to detect shoplifting in a store, the type might be âobject sold by storeâ and âpersonâ. Other examples will be apparent to those skilled in the art. Patterns identified by neural network 1012 need not be identical to stored patterns to activate an output signal. For example, stored patterns that identify âa personâ or âa pedestrianâ are based on major human features such as a head, a face, arms, and hands. The patterns associated with âobject sold by the storeâ or âanother vehicleâ use a system of weights that weight some pattern components more heavily than others.
In one embodiment, neural network 1014 operates by applying a clustering algorithm, such as k-means clustering, discussed in greater detail above, to assign each object to a type. K-means clustering is useful for object classification because objects with greater similarity to a target can be assigned to the type of the target. For example, in one embodiment, a piece of furniture is classified as âa chairâ or âa tableâ based on comparison with the features of a target model chair or model table. Similarly, in one embodiment, an object is classified as âa personâ based on a comparison with a target person or with a feature list, e.g. face having eyes, ears, nose, and hair; arms; torso; and legs. In one embodiment, information that is irrelevant to assigning an object to a type is considered cognitive noise and is added to a cognitive noise vector 1013. The output of this noise vector is provided for further processing at a neural network level 1016 that is above the next neural network level 1014 in the stack.
Neural network 1014 is trained by inputting patterns of objects having the type of interest. For example, in a furniture classification embodiment of the neural network, the input would be a plethora of tables, desks, chairs, couches, futons, beds, folding couches, etc. for the system to classify. A backward-propagation algorithm 1032 adjusts neural network 1014's weights based on the network's successes and failures in identifying the objects and their types. When neural network 1014 associates a pattern with each type of object, the network outputs to neural network 1016 the pattern's classification as an object and the type associated therewith, as well as the object's centroid, dimensions, store coordinates, and history of centroid positions at successive times. Note that, in some embodiments, such as the furniture classifier, the history of centroid positions at successive times is irrelevant and unnecessary, and thus may be considered cognitive noise and provided to noise vector 1015. In other embodiments, such as the vision system for an autopilot for a car, the centroid position is highly relevant. Data from the noise vector 1015 is provided for further processing at a level of the stacked neural network 1018 that is higher than the next level in the stack 1016.
Neural network 1016 is a feed-forward neural network that performs processing actions at stage/order 4, the Nominal stage/order, of the model described in Table 1. At the Nominal stage/order, an intelligent system can identify simple relationships between concepts and label them. Neural network 1016 has one hidden layer. The neurons in this layer receive excitatory and inhibitory input based on the centroids, dimensions, coordinates, and history of centroid positions at successive one-second time points of objects and persons that was received from neural network 1014. The neurons also receive input from other neurons within the hidden layer. In this neural network, the objects of interest are associated with motion vectors, which are signaled by excitatory input from neurons, within the hidden layer, activated by patterns for âmotion vector associated with object of interestâ. When âan objectâ has become associated with âa motion vector,â an output signal is triggered. Neural network 1016 then outputs to neural network 1018 an array pattern for the object/motion vector pair and the history of store coordinates of the object array at successive times. The array pattern uniquely identifies the object and the motion vector as being associated with the object. This information can now be provided to another system for further analysis. For example, in the autopilot for the vehicle, the information may be provided to a processor that would adjust the travel path of the vehicle so as to avoid collisions and obey traffic laws.
Neural network 1016 network is trained using patterns of objects having a type and motion vectors. A backward-propagation algorithm 1034 adjusts weights each time neural network 1016 successfully matches âan objectâ with âa motion vector.â
Neural network 1018 is an adaptive-resonance (ART) neural network that performs processing actions at stage/order 5, the Sentential stage/order, of the model described in Table 1. At this stage/order, classes and patterns are ordered. Using Sentential stage/order tasks, neural network 1018 tracks object/motion vector pairs and generates a flag if an object/motion vector pair corresponds to one that the neural network is designed to detect. For example, in one embodiment involving a vision sensor for a motor vehicle autopilot, a flag is raised if another vehicle is entering the travel path of the vehicle implementing the autopilot. Neural network 1018 has two hidden inner layers. The object/motion vector array pattern input from neural network 1016 is mapped to a specific cluster in the first hidden layer and the weights associated with the cluster are set for that object/motion vector array pattern. Each time this array pattern enters from neural network 1016, it maps to this cluster. The cluster is reset when it no longer matches incoming patterns. Each time that the cluster is activated, it sends excitatory signals containing the coordinates and time points associated with the person/object array to the second hidden layer. The areas of excitation in this layer track the object/motion vector pairs in relation to the target objects/motion vectors of interest to the neural network. An alert 1022 is generated when the pattern of neuron excitation indicates that an object/motion vector pair of interest has been discovered.
Neural network 1018 is trained using patterns of object/motion vector pairs, some of which are of the type to be detected. A backward-propagation algorithm 1036 adjusts weights in each of the neural networks 1010, 1012, 1014, 1016, and 1018 based on the hierarchical stacked neural network's success in detecting the desired object/motion vector pairs.
Persons skilled in the art will recognize many uses of the image analysis system and method described herein. In addition to analyzing information related to shoplifting and vehicle autopilot, the present invention can be used, for example, to detect violence or criminal activity in a neighborhood, and alert the police when it takes place. In another embodiment, the present invention can be used for traffic violation detection. In yet another embodiment, the present invention can be used to analyze and classify a large number of photographs, e.g., to determine what percentage of a set of photographs in a high school yearbook or a social networking âfriend listâ have blue eyes, etc.
Hardware Overview
 FIG. 4 (see U.S. Pat. No. 7,702,660, issued to Chan, expressly incorporated herein by reference), shows a block diagram that illustrates a computer system 400 upon which an embodiment of the invention may be implemented. Computer system 400 includes a bus 402 or other communication mechanism for communicating information, and a processor 404 coupled with bus 402 for processing information. Computer system 400 also includes a main memory 406, such as a random access memory (RAM) or other dynamic storage device, coupled to bus 402 for storing information and instructions to be executed by processor 404. Main memory 406 also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor 404. Computer system 400 further includes a read only memory (ROM) 408 or other static storage device coupled to bus 402 for storing static information and instructions for processor 404. A storage device 410, such as a magnetic disk or optical disk, is provided and coupled to bus 402 for storing information and instructions.
Computer system 400 may be coupled via bus 402 to a display 412, such as a cathode ray tube (CRT), for displaying information to a computer user. An input device 414, including alphanumeric and other keys, is coupled to bus 402 for communicating information and command selections to processor 404. Another type of user input device is cursor control 416, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor 404 and for controlling cursor movement on display 412. This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.
The invention is related to the use of computer system 400 for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system 400 in response to processor 404 executing one or more sequences of one or more instructions contained in main memory 406. Such instructions may be read into main memory 406 from another machine-readable medium, such as storage device 410. Execution of the sequences of instructions contained in main memory 406 causes processor 404 to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.
The term âmachine-readable mediumâ as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system 400, various machine-readable media are involved, for example, in providing instructions to processor 404 for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device 410. Volatile media includes dynamic memory, such as main memory 406. Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus 402. Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications. All such media must be tangible to enable the instructions carried by the media to be detected by a physical mechanism that reads the instructions into a machine.
Common forms of machine-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, quantum physics effect processing elements, or any other medium from which a computer can read.
Various forms of machine-readable media may be involved in carrying one or more sequences of one or more instructions to processor 404 for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system 400 can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus 402. Bus 402 carries the data to main memory 406, from which processor 404 retrieves and executes the instructions. The instructions received by main memory 406 may optionally be stored on storage device 410 either before or after execution by processor 404.
Computer system 400 also includes a communication interface 418 coupled to bus 402. Communication interface 418 provides a two-way data communication coupling to a network link 420 that is connected to a local network 422. For example, communication interface 418 may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface 418 may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented, such as WiFi (a/b/g/n), DSRC, GSM, CDMA, 2G, 3G, 4G, LTE, etc. In any such implementation, communication interface 418 sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.
Network link 420 typically provides data communication through one or more networks to other data devices. For example, network link 420 may provide a connection through local network 422 to a host computer 424 or to data equipment operated by an Internet Service Provider (ISP) 426. ISP 426 in turn provides data communication services through the world wide packet data communication network now commonly referred to as the âInternetâ 428. Local network 422 and Internet 428 both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link 420 and through communication interface 418, which carry the digital data to and from computer system 400, are exemplary forms of carrier waves transporting the information.
Computer system 400 can send messages and receive data, including program code, through the network(s), network link 420 and communication interface 418. In the Internet example, a server 430 might transmit a requested code for an application program through Internet 428, ISP 426, local network 422 and communication interface 418.
The received code may be executed by processor 404 as it is received, and/or stored in storage device 410, or other non-volatile storage for later execution. In this manner, computer system 400 may obtain application code in the form of a carrier wave.
Having described preferred embodiments of the invention with reference to the accompanying drawings, it is to be understood that the invention is not limited to those precise embodiments, and that various changes and modifications may be effected therein by one skilled in the art without departing from the scope or spirit of the invention as defined in the appended claims.



 

 
 
 

 
 
 

 
 
 
 
 
 
 

 
 
 



TABLE 1




 


A sequence of behaviors placed into different orders of hierarchical complexity




 
Name of Order of
 


Order/
Hierarchical
 


Stage
Complexity
Example


 




0
Calculatory
Simple Machine Arithmetic on 0's and 1's


1
Sensory & Motor
Seeing circles, squares, etc. or touching them.


2
Circular Sensory-
Reaching and grasping a circle or square.




 
motor
* 
*
* 
* 
*


 
 
â¡
â¡
â¡
â¡
â¡


 
 
âª
âª
âª
âª
âª


 
 
âª
/
â



â¡




3
Sensory-motor
A class of filled in squares may be made


4
Nominal
That class may be named, âSquaresâ


5
Sentential
The numbers, 1, 2, 3, 4, 5 may be said in order


6
Pre-operational
The objects in row 5 may be counted. The last count called 5,


 
 
five, cinco, etc.


7
Primary
There are behaviors that act on such classes that we call simple


 
 
arithmetic operations:


 
 
1 + 3 = 4; 5 + 15 = 20; 5(4) = 20; 5(3) = 15; 5(1) = 5


8
Concrete
There are behaviors that order the simple arithmetic behaviors


 
 
when multiplying a sum by a number. Such distributive behaviors


 
 
require the simple arithmetic behavior as a prerequisite, not just a


 
 
precursor: 5(1 + 3) = 5(1) + 5(3) = 5 + 15 = 20


9
Abstract
All the forms of five in the five rows in the example are


 
 
equivalent in value, x = 5. Forming class based on abstract feature


10
Formal
The general left hand distributive relation is


 
 
x * (y + z) = (x * y) + (x * z)


11
Systematic
The right hand distribution law is not true for numbers but is true


 
 
for proportions and sets.


 
 
x + (y * z) = (x * y) + (x * z)


 
 
x  â(y â© z) = (x â© y)  â(x â© z)


12
Meta-systematic
The system of propositional logic and elementary set theory are


 
 
isomorphic


 
 
x & (y or z) = (x & y) or (x & z) Logic


 
 
x â© (y  âz) = (x â© y)  â(x â© z) Sets


 
 
T(False)  âÎ¦ Empty set


 
 
T(True)  âÎ© Universal set


13
Paradigmatic
Distributive Systems are part of the Mathematical Paradigm.


 
 
Mathematics integrates algebra, set theory, elementary


 
 
probability theory, analysis, and based upon such an integration


 
 
generates measure theory, and the mathematics used in physics.


14
Cross-
Mathematics and Physics are integrated in the Mathematical


 
paradigmaticmatic
Physics of Quantum Mechanics (Einstein, 1950; Planck, 1922;


 
 
Bohr, 1934) including the Standard Theory of Particles (Gell-


 
 
Mann, 1964, Weinberg, 1983, Salam, 1972) Special and General


 
 
Relativity Theory (Einstein, 1950)


 








 

 
 
 
 
 

 
 
 
 
 



TABLE 2A




 


General Description of Sequence




 
Vocaliza-
 
 
 


 
tions
Verbal
 
 


 
and words
relationships
Examples


 




0
Calculatory
None
None
None


1
sensory &
Babbling (Universal)
None
None


 
motor 
 
 
 


 
actions
 
 
 


2
circular
Phonemes
 
Gestures, âaaâ


 
sensory-
 
 
 


 
motor
 
 
 


 
actions
 
 
 


3
sensory-
Morphemes
Phoneme action relationships 
Holding cup out and saying âwaâ


 
motor
 
 
 


4
Nominal
Single words: ejaculatives 
Relating concepts to others through a word 
Says âwaterâ


 
 
& exclamations, verbs,
 
 


 
 
nouns, number names, 
 
 


 
 
letter names
 
 


5
Sentential
Pronouns
Incomplete sentences; then complete sentences, 
States a rule âDon't touchâ


 
 
 
crude dichotomies, ordered numbers & letters
 


6
preoper-
 
Multiple sentence stories with logically order
Says âThe water is filling the bathtubâ


 
ational
 
sequenced events. Counting materials laid out 
 


 
 
 
in a line
 


7
Primary
 
Stories with logically order sequenced events
The water is filling the bathtub so I can take a


 
 
 
connected solidly to reality with some specified 
bath


 
 
 
times, places, acts, actors. Either perspective of
 


 
 
 
self or other.
 


8
Concrete
times, places, acts, actors
Stories about things, incidents, events, actors,
If I turn on the faucet, the water will run out


 
 
 
actions, places in the context of the interaction
and fill the bathtub. My parents like it when I


 
 
 
between self and other.
fill the tub myself. They are more willing to buy


 
 
 
 
me clothes when I am always clean.


9
Abstract
Variable time, place, act, 
Variable time, places, acts, actors, state, type
The water can run out quickly or slowly and the


 
 
actor, state, type;
Variables such as Stereotypes,
temperature may get colder after awhile.


 
 
Quantifies (all, none, 
Logical Quantification Words: all, none, some,
All teachers do that!


 
 
some) play an
never, sometimes, always, no one, somebody,
 


 
 
important role in the 
everyone Propositions with variables
 


 
 
preadolescent's formulation 
 
 


 
 
of categorical assertions 
 
 


 
 
(e.g., âAll teachers 
 
 


 
 
do that!â).
 
 


10
Formal
Words: linear, logical, one 
Variables connected by âif . . . thenâ and other 
Turning of a faucet changes the size of the


 
 
dimensional 
relations; Empirical, or logical evidence and
opening of the passage way and thereby


 
 
 
argument. Relations among Variables
controlling the amount of flow.


 
 
 
Single variables on input side; Empirical, or
 


 
 
 
logical evidence and argument.
 


11
Systematic
Systems words appear in adult's
Systems of relations. Relations among
For slow flows, amount of flow is controlled by


 
 
utterances: legal system, society, 
relationship among variables
1) Water pressure, 2) size of faucet opening 3)


 
 
our company, the economy, the
 
smallest of pipe size to source.


 
 
country.
 
 


12
meta-
Metalogical, meta-analytic 
Supersystems of systems
The systems that describe non-turbulent water


 
systematic
words appear.
 
flow and electric flow (amperes) are


 
 
Properties of systems can
 
isomorphic. Flow equals pressure (volts) Ã


 
 
be considered:
 
resistance (ohms)


 
 
homomorphic, isomorphic, 
 
 


 
 
incomplete, inconsistent system,
 
 


 
 
consistent system,
 
 


 
 
incomplete system, 
 
 


 
 
complete system,
 
 


 
 
incommensurable system,
 
 


 
 
orders of complexity of the 
 
 


 
 
system, commensurable
 
 


 
 
systems, etc.
 
 


13
para-
Newly created 
 
There are many metasystems that belong to


 
digmatic
paradigmatic words
 
non-relativistic and non statistical mechanics


 
 
are used whether
 
 


 
 
metasystems
 
 


 
 
may be integrated.
 
 


14
cross-
Newly created word about
 
By crossing mathematics and physical


 
para-
integration of paradigms. 
 
experimentation, classical mechanics arises.


 
digmatic


 








 

 
 
 
 

 
 
 
 



TABLE 2B




 


General Description of Hierarchy




Order/
 
 
 


Stage
Discriminations
Vocalizations


 




0
calculatory
Exact-no generalization
none


1
sensory & motor actions
Rote, Generalized
Babbling (Universal)


2
circular sensory-motor
Open-Ended Classes
Phonemes


 
actions
 
 


3
sensory-motor
Concepts
Morphemes


4
nominal
Relations among concepts
Single words: ejaculatives B exclamations, verbs, nouns, number


 
 
 
names, letter names


5
sentential
Imitates and acquires sequences. 
Pronouns: my, mine, I; yours, you; we, ours; they, them


 
 
Follows short sequential acts
 


6
pre-operational
Simple deduction but contradiction 
Connectives: as, when, then, why, before


 
 
is not excluded. Follows lists of
 


 
 
sequential acts
 


7
primary
Simple logical deduction and empirical 
Times, places, acts, actors


 
 
rules involving time
 


 
 
sequence. Simple arithmetic
 


8
concrete
Full arithmetic
Interactions, social events, what happened among others


9
abstract
Discriminates variables such as 
Variable time, place, act, actor, state, type; 


 
 
Stereotypes; Logical
Quantifies (all, none, some);


 
 
Quantification; (all, none, some)
Categorical assertions 


 
 
 
(e.g., âAll teachers do that!â).


10
formal
Argue using empirical or logical evidence. 
Words: linear, logical, one dimensional, if... then, thus, therefore,


 
 
Logic is linear, 1 dimensional.
because.


11
systematic
Constructs multi variate systems and 
Systems: legal system, society, our company, the economy, 


 
 
matrices, coordinating more
the country.


 
 
than one variable. Events and ideas situated
 


 
 
in a larger context.
 


12
metasystematic
Integrate systems to construct 
Metalogical, meta-analytic. Properties of systems named:


 
 
multisystems. 
homomorphic, isomorphic, incomplete, inconsistent or consistent,


 
 
Compare systems and perspectives 
incomplete or complete, commensurable, incommensurable


 
 
in a systematic
 


 
 
way (across multiple domains).
 


 
 
Reflects on systems.
 


13
paradigmatic
Discriminate how to fit metasystems 
 


 
 
together to form new
 


 
 
paradigms
 


14
crossparadigmatic
Discriminate how to form new fields
 


 
 
by crossing paradigms.


 








 

 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 



TABLE 2C




 


General Description of Sequence




 
Kohl-
Discrim-
Vocalizations 
 
 
Receptive speech
 


MHC
berg
inations
and words
Verbal relationships
Examples
examples
 


 




0
âââ1
calculatory
Exactâno 
none
none
none
none


 
 
 
generalization
 
 
 
 


1
ââââ0
sensory &
Rote, Generalized
Babbling (Universal)
none
none
none


 
 
motor
 
 
 
 
 


 
 
actions
 
 
 
 
 


2
ââââ0
circular
Open-Ended Classes
Phonemes
 
gestures, âaaâ
Follows 


 
 
sensory-
 
 
 
directions
one act


 
 
motor
 
 
 
 
 


 
 
actions
 
 
 
 
 


3
38352
sensory-
Concepts
Morphemes
phoneme 
Holding cup out 
Follows 


 
 
motor
 
 
action 
and saying âwaâ
simple


 
 
 
 
 
relationships
 
 


4
â
nominal
Relations 
Single words: ejaculatives 
Says âwaterâ
Follows simple
commands


 
 
 
among concepts
& exclamations, verbs, nouns, 
 
chain of
 


 
 
 
 
number names, letter names
 
commands such as:
 


5
ââââ1
sentential
Imitates and 
Pronouns
incomplete 
States a rule âDon't
Follows


 
 
 
acquires sequences.
 
sentences; then 
touchâ
instruc-


 
 
 
Follows short 
 
complete sentences, 
 
tions: 


 
 
 
sequential acts.
 
crude dichotomies, 
 
âTurn off 


 
 
 
 
 
ordered numbers &
 
 


 
 
 
 
 
letters
 
 


6
1/2
pre-
 
 
Multiple sentence 
Says âThe water 
VCR when 


 
 
operational
 
 
stories with logically 
is filling the 
tape is 


 
 
 
 
 
order sequenced 
bathtubâ
overâ


 
 
 
 
 
events. Counting 
 
 


 
 
 
 
 
materials laid out 
 
 


 
 
 
 
 
in a line
 
 


7
ââââ2
primary
Simple logical 
times, places, acts, actors
Stories with logically 
The water is 
Can follow


 
 
 
deduction and 
 
order sequenced 
filling the 
directions


 
 
 
empirical rules 
 
events connected 
bathtub so I 
without 


 
 
 
involving time 
 
solidly to reality.
can take a bath
being 


 
 
 
sequence. Simple 
 
 
 
super- 


 
 
 
arithmetic
 
 
 
vised for 


 
 
 
 
 
 
 
an 


 
 
 
 
 
 
 
extended 


 
 
 
 
 
 
 
period of 


 
 
 
 
 
 
 
time.


8
38385
concrete
Full arithmetic
interactions, social events, 
Stories with some 
If I turn on 
 


 
 
 
 
what happened with 
specified times, 
the faucet, the 
 


 
 
 
 
among others.
places, acts, actors, 
water will run out 
 


 
 
 
 
 
and the relation 
and fill the 
 


 
 
 
 
 
among the above. 
bathtub.
 


 
 
 
 
 
Things, Incidents, 
 
 


 
 
 
 
 
Events, Actors, 
 
 


 
 
 
 
 
Actions, Places
 
 


9
ââââ3
abstract
Discriminates 
Variable time, place, act, 
Variable time, 
The water can 
All 


 
 
 
variables such as
actor, state, type; Quantifies 
place, act, actor, 
run out quickly 
teachers 


 
 
 
Stereotypes; 
(all, none, some) play an
state, type 
or slowly and 
do that!


 
 
 
Logical
important role in the 
Variables such as 
the temperature 
 


 
 
 
Quantification;
preadolescent's formulation 
Stereotypes.
may get colder 
 


 
 
 
(all, none, some)
of categorical assertions 
Logical Quantification 
after awhile.
 


 
 
 
 
(e.g., âAll teachers do that!â).
Words: all, none, some. 
All teachers 
 


 
 
 
 
 
Propositions with 
do that!
 


 
 
 
 
 
variables
 
 


10
38414
formal
Argumentation 
Words: linear, logical, 
Variables connected 
 
 


 
 
 
contains empirical or
one dimensional
by âif . . . thenâ and 
 
 


 
 
 
logical evidence.
 
other relations. 
 
 


 
 
 
Logical reasoning 
 
Empirical, or logical 
 
 


 
 
 
is linear, logical,
 
evidence and argument. 
 
 


 
 
 
one dimensional.
 
Relations among 
 
 


 
 
 
 
 
Variables Single 
 
 


 
 
 
 
 
variables on input 
 
 


 
 
 
 
 
side Empirical, 
 
 


 
 
 
 
 
or logical evidence 
 
 


 
 
 
 
 
and argument.
 
 


11
ââââ4
systematic
The adult constructs 
Systems words appear in 
Systems of relations. 
 
 


 
 
 
multi variate systems
adult's utterances: legal 
Relations among 
 
 


 
 
 
and matrices, 
system, society, our company, 
relationship 
 
 


 
 
 
coordinating
the economy, the country.
among variables
 
 


 
 
 
more than one 
 
 
 
 


 
 
 
variable as input.
 
 
 
 


 
 
 
Events and ideas can
 
 
 
 


 
 
 
be situated in
 
 
 
 


 
 
 
a larger context.
 
 
 
 


12
ââââ5
meta-
Some adults can
Metalogical, meta-analytic 
Supersystems 
 
 


 
 
systematic
integrate systems to 
words appear. Properties 
of systems
 
 


 
 
 
construct 
of systems can be considered: 
 
 
 


 
 
 
multisystems. 
homomorphic, isomorphic, 
 
 
 


 
 
 
Comparison of 
incomplete, inconsistent system, 
 
 
 


 
 
 
systems and 
consistent system, incomplete 
 
 
 


 
 
 
perspectives occurs 
system, complete system,
 
 
 


 
 
 
in a systematic way 
incommensurable system, 
 
 
 


 
 
 
(i.e., across multiple 
orders of complexity of 
 
 
 


 
 
 
domains). The 
the system, commensurable 
 
 
 


 
 
 
metasystematic 
systems, etc.
 
 
 


 
 
 
adult reflects on 
 
 
 
 


 
 
 
systems.
 
 
 
 


13
ââââ8
paradig-
There are a few adults 
 
 
 
 


 
 
matic
who can discriminate how 
 
 
 
 


 
 
 
to fit metasystems together
 
 
 
 


 
 
 
to form new paradigms
 
 
 
 


14
ââââ7
cross-
Historically there a few 
 
 
 
 


 
 
paradig-
people who have 
 
 
 
 


 
 
matic
discriminated how to form 
 
 
 
 


 
 
 
new fields by crossing 
 
 
 
 


 
 
 
paradigms.